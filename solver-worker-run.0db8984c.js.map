{"version":3,"sources":["js/puzzle-changes.ts","js/solver/solver-base.ts","js/solver/solver-iterative-base.ts","js/solver/solver-no-matching.ts","js/solver/solver-brute-base.ts","js/solver/solver-brute-force.ts","js/solver/solver-only-valid.ts","js/puzzle/side.ts","data/simple-layout-data.json","data/simple-tile-data.json","js/simple-puzzle.ts","data/pocket-layout-data.json","data/pocket-tile-data.json","js/pocket-puzzle.ts","data/great-layout-data.json","data/great-tile-data.json","js/great-puzzle.ts","js/puzzle/tetrahedron.ts","js/puzzle/face.ts","js/puzzle/tile-position-state.ts","js/puzzle/tile-position.ts","js/puzzle/tile.ts","js/puzzle/tile-pool.ts","js/puzzle-loader.ts","js/solver/solver-genetic.ts","js/solver/solver-human.ts","js/solver/solver-factory.ts","js/solver/solver-worker.ts","js/solver/solver-worker-run.ts"],"names":["module","exports","puzzle","numberOfTilesPerFace","faces","name","joins","fromSide","toSide","ofFace","tilePositions","position","ofTilePosition","onFace","totalNumberOfTiles","tiles","tile","sideA","sideB","sideC"],"mappings":"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","file":"solver-worker-run.0db8984c.js","sourceRoot":"../src","sourcesContent":["// These change value objects allow us to keep the solving and display code separate.\n//\n// Initial - Draw an empty puzzle\n// Start - Draw a tile at it's starting position\n// StartDraggable - A draggable tile at it's start position\n// TileDraggable - A draggable tile at a tile position\n// Empty - Draw an empty tile position\n// Current - The current state of the puzzle\n// Set - Draw a tile at it's current tile position (no animation)\n// Add - Animate a tile moving from it's start position to a tile position\n// Rotate - Animate rotating a tile at a tile position\n// Remove - Animate a tile moving from a tile position back to it's start position\n// Solved - A solution to the current puzzle\n// Completed - No more solutions to the current puzzle\n\n\nenum PuzzleChangeType {\n    Initial = \"Initial\",\n    Start = \"Start\",\n    StartDraggable = \"StartDraggable\",\n    TileDraggable = \"TileDraggable\",\n    Empty = \"Empty\",\n    Current = \"Current\",\n    Set = \"Set\",\n    Add = \"Add\",\n    Rotate = \"Rotate\",\n    Remove = \"Remove\",\n    Solved = \"Solved\",\n    Completed = \"Completed\"\n}\n\n\nclass PuzzleChange {\n\n    static readonly INITIAL = new PuzzleChange(PuzzleChangeType.Initial);\n\n    constructor(readonly type: PuzzleChangeType) {}\n\n    isSolved(): boolean {\n        return this.type === PuzzleChangeType.Solved;\n    }\n\n    isCompleted(): boolean {\n        return this.type === PuzzleChangeType.Completed;\n    }\n\n}\n\n\nclass PuzzleChangeSet extends PuzzleChange {\n\n    static current(puzzleChanges: Array<PuzzleChange>): PuzzleChange {\n        return new PuzzleChangeSet(PuzzleChangeType.Current, puzzleChanges);\n    }\n\n    static solved(puzzleChanges: Array<PuzzleChange>): PuzzleChange {\n        return new PuzzleChangeSet(PuzzleChangeType.Solved, puzzleChanges);\n    }\n\n    static completed(puzzleChanges: Array<PuzzleChange>): PuzzleChange {\n        return new PuzzleChangeSet(PuzzleChangeType.Completed, puzzleChanges);\n    }\n\n    static build(type: string, puzzleChanges: Array<PuzzleChange>): PuzzleChange {\n        let puzzleChange: PuzzleChange;\n        if (type === \"Solved\") {\n            puzzleChange = PuzzleChangeSet.solved(puzzleChanges);\n        } else if (type === \"Completed\") {\n            puzzleChange = PuzzleChangeSet.completed(puzzleChanges);\n        } else {\n            throw new Error(\"Build PuzzleChangeSet only for Solved or Completed changes!\");\n        }\n        return puzzleChange;\n    }\n\n    constructor(type: PuzzleChangeType, readonly puzzleChanges: Array<PuzzleChange>) {\n        super(type);\n    }\n\n}\n\n\nclass TilePositionChange extends PuzzleChange {\n\n    static empty(tilePositionId: string): PuzzleChange {\n        return new TilePositionChange(PuzzleChangeType.Empty, tilePositionId, 0);\n    }\n\n    static rotate(tilePositionId: string, rotations: number): PuzzleChange {\n        return new TilePositionChange(PuzzleChangeType.Rotate, tilePositionId, rotations);\n    }\n\n    constructor(type: PuzzleChangeType, readonly tilePositionId: string, readonly rotations: number) {\n        super(type);\n    }\n\n}\n\n\nclass TileChange extends TilePositionChange {\n\n    static start(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.Start, tilePositionId, tileId, rotations, segments);\n    }\n\n    static startDraggable(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.StartDraggable, tilePositionId, tileId, rotations, segments);\n    }\n\n    static tileDraggable(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.TileDraggable, tilePositionId, tileId, rotations, segments);\n    }\n\n    static set(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.Set, tilePositionId, tileId, rotations, segments);\n    }\n\n    static add(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.Add, tilePositionId, tileId, rotations, segments);\n    }\n\n    static remove(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.Remove, tilePositionId, tileId, rotations, segments);\n    }\n\n    constructor(type: PuzzleChangeType, tilePositionId: string, readonly tileId: number, rotations: number, readonly segments: string) {\n        super(type, tilePositionId, rotations);\n    }\n\n}\n\n\nexport { PuzzleChangeType, PuzzleChange, PuzzleChangeSet, TilePositionChange, TileChange }\n","import { PuzzleChange, PuzzleChangeSet, TileChange, TilePositionChange } from \"../puzzle-changes\";\nimport { Tile } from \"../puzzle/tile\";\nimport { TilePosition } from \"../puzzle/tile-position\";\n\n/**\n * A Solver is used to generate solutions to a given puzzle.\n * Solvers may use different strategies to find a solution but will need to conform with the following:\n * - After setting an initialState changes to the puzzle will be enumerated using nextState until a solution is found or all states\n *   have been checked.\n * - Once a solution is found forceNextState can be used to re-start the search for another solution then changes enumerated using\n *   nextState again until a further solution is found.\n * - stateForDisplay can be called to provide a snapshot of the puzzles current state.\n */\n\n\ninterface Solver {\n    initialState: () => PuzzleChange;\n    nextState: () => PuzzleChange;\n    forceNextState: () => PuzzleChange;\n    stateForDisplay: () => Array<PuzzleChange>;\n}\n\n\nabstract class SolverBase implements Solver {\n\n    protected constructor() {}\n\n    abstract initialState(): PuzzleChange;\n\n    abstract nextState(): PuzzleChange;\n\n    abstract forceNextState(): PuzzleChange;\n\n    abstract stateForDisplay(): Array<PuzzleChange>;\n\n    protected static start(tile: Tile): PuzzleChange {\n        return TileChange.start(\"start\" + tile.id, tile.id, 0, tile.segments);\n    }\n\n    protected static startDraggable(tile: Tile): PuzzleChange {\n        return TileChange.startDraggable(\"Draggable\", tile.id, 0, tile.segments);\n    }\n\n    protected static tileDraggable(tilePosition: TilePosition): PuzzleChange {\n        return TileChange.tileDraggable(tilePosition.id, tilePosition.state.tile.id, tilePosition.state.rotations, tilePosition.state.tile.segments);\n    }\n\n    protected static empty(tilePosition: TilePosition): PuzzleChange {\n        return TilePositionChange.empty(tilePosition.id);\n    }\n\n    protected static set(tilePosition: TilePosition): PuzzleChange {\n        return TileChange.set(tilePosition.id, tilePosition.state.tile.id, tilePosition.state.rotations, tilePosition.state.tile.segments);\n    }\n\n    protected static add(tilePosition: TilePosition): PuzzleChange {\n        return TileChange.add(tilePosition.id, tilePosition.state.tile.id, tilePosition.state.rotations, tilePosition.state.tile.segments);\n    }\n\n    protected static rotate(tilePosition: TilePosition, rotations: number): PuzzleChange {\n        return TilePositionChange.rotate(tilePosition.id, rotations);\n    }\n\n    protected static remove(tilePosition: TilePosition): PuzzleChange {\n        return TileChange.remove(tilePosition.id, tilePosition.state.tile.id, tilePosition.state.rotations, tilePosition.state.tile.segments);\n    }\n\n    protected static current(puzzleChanges: Array<PuzzleChange>): PuzzleChange {\n        return PuzzleChangeSet.current(puzzleChanges);\n    }\n\n    protected static solved(puzzleChanges: Array<PuzzleChange>): PuzzleChange {\n        return PuzzleChangeSet.solved(puzzleChanges);\n    }\n\n    protected static completed(puzzleChanges: Array<PuzzleChange>): PuzzleChange {\n        return PuzzleChangeSet.completed(puzzleChanges);\n    }\n\n}\n\n\nexport { Solver, SolverBase }\n","import { SolverBase } from \"./solver-base\";\nimport { Tetrahedron } from \"../puzzle/tetrahedron\";\nimport { TilePool } from \"../puzzle/tile-pool\";\nimport { TilePosition } from \"../puzzle/tile-position\";\nimport { PuzzleChange } from \"../puzzle-changes\";\nimport { PuzzleComponents } from \"../common-data-schema\";\n\n/**\n * An iterative solver is one which iterate over all the puzzle pieces and positions trying to find a solution.\n */\n\nabstract class IterativeSolverBase extends SolverBase {\n\n    protected readonly _tetrahedron: Tetrahedron;\n    protected readonly _tilePool: TilePool\n    protected readonly _emptyTilePositions: Array<TilePosition>;\n\n    constructor(puzzle: PuzzleComponents) {\n        super();\n        this._tetrahedron = puzzle.tetrahedron;\n        this._tilePool = puzzle.tilePool;\n        if (this._tilePool.tileCount !== this._tetrahedron.tilePositionCount) {\n            throw new Error(\"There must be enough Tiles to cover the Tetrahedron!\");\n        }\n        // The ordering of the empty tile positions impacts how long iterative solvers can take to find a solution.\n        // The following ordering, while not optimum, helps improve the time:\n        // Face 1: Tile Positions 1 - n\n        // Face 2: Tile Positions n - 1\n        // Face 4: Tile Positions n - 1\n        // Face 3: Tile Positions 1 - n\n        const face1 = this._tetrahedron.getFace(\"1\").emptyTilePositions;\n        const face2 = this._tetrahedron.getFace(\"2\").emptyTilePositions.reverse();\n        const face4 = this._tetrahedron.getFace(\"4\").emptyTilePositions.reverse();\n        const face3 = this._tetrahedron.getFace(\"3\").emptyTilePositions;\n        this._emptyTilePositions = face1.concat(face2).concat(face4).concat(face3);\n        if (this._emptyTilePositions.length === 0) {\n            throw new Error(\"Solver expects puzzle to have empty TilePositions at the start!\")\n        }\n    }\n\n    initialState(): PuzzleChange {\n        const displayChanges = this._tetrahedron.tilePositions\n            .map((tilePosition) => SolverBase.empty(tilePosition))\n            .concat(this._tilePool.tiles.map((tile) => SolverBase.start(tile)));\n        return SolverBase.current(displayChanges);\n    }\n\n    stateForDisplay(): Array<PuzzleChange> {\n        return this._tetrahedron.tilePositions\n            .map((tilePosition) => {\n                if (tilePosition.state.isEmpty()) {\n                    return SolverBase.empty(tilePosition);\n                } else {\n                    return SolverBase.set(tilePosition);\n                }\n            });\n    }\n\n}\n\nexport { IterativeSolverBase }\n","import { PuzzleComponents } from \"../common-data-schema\";\nimport { IterativeSolverBase } from \"./solver-iterative-base\";\nimport { Tile } from \"../puzzle/tile\";\nimport { TilePosition } from \"../puzzle/tile-position\";\nimport { PuzzleChange, TileChange } from \"../puzzle-changes\";\nimport { getRandomInt } from \"../utils\";\n\n\nexport class NoMatchingSolver extends IterativeSolverBase {\n\n    private _tilePosition: TilePosition;\n    private _rotating: number = 0;\n\n    constructor(puzzle: PuzzleComponents,\n                private _tileSelection: string, private _tilePlacement: string, private _tileRotation: string) {\n        super(puzzle);\n        this._tilePosition = this.getNextTilePosition();\n    }\n\n    private getNextTilePosition(): TilePosition {\n        switch (this._tilePlacement) {\n            case \"Random\":\n                const position = getRandomInt(this._emptyTilePositions.length);\n                const tilePosition = this._emptyTilePositions.splice(position, 1);\n                return tilePosition[0];\n            case \"Sequential\":\n                return this._emptyTilePositions.shift()!;\n            default:\n                throw new Error(\"Invalid tile placement option!\");\n        }\n    }\n\n    private getTileSelection(): Tile {\n        switch (this._tileSelection) {\n            case \"Random\":\n                return this._tilePool.randomTile;\n            case \"Sequential\":\n                return this._tilePool.nextTile;\n            case \"DisplayTest\":\n                return this._tilePool.displayTestTile;\n            default:\n                throw new Error(\"Invalid tile selection option!\");\n        }\n    }\n\n    private tileRotations(): number {\n        switch (this._tileRotation) {\n            case \"None\":\n                return 0;\n            case \"Random\":\n                return getRandomInt(3);\n            default:\n                throw new Error(\"Invalid tile rotation option!\");\n        }\n    }\n\n    private addTile(): PuzzleChange {\n        this._tilePosition.state.tile = this.getTileSelection();\n        this._rotating = this.tileRotations();\n        return TileChange.add(this._tilePosition.id, this._tilePosition.state.tile.id, 0, this._tilePosition.state.tile.segments);\n    }\n\n    private rotateOrNext(): PuzzleChange {\n        if (this._rotating > 0) {\n            this._rotating--;\n            this._tilePosition.state.rotate();\n            return IterativeSolverBase.rotate(this._tilePosition, 1);\n        } else {\n            if (this._emptyTilePositions.length === 0) {\n                return IterativeSolverBase.solved(this.stateForDisplay());\n            } else {\n                this._tilePosition = this.getNextTilePosition();\n                return this.addTile()\n            }\n        }\n    }\n\n    nextState(): PuzzleChange {\n        if (this._tilePosition.state.isEmpty()) {\n            return this.addTile();\n        }\n        return this.rotateOrNext();\n    }\n\n    forceNextState(): PuzzleChange {\n        // TODO: Reset the puzzle or make random changes?\n        return IterativeSolverBase.completed(this.stateForDisplay());\n    }\n\n}\n","import { IterativeSolverBase } from \"./solver-iterative-base\";\nimport { Tile } from \"../puzzle/tile\";\nimport { TilePosition } from \"../puzzle/tile-position\";\nimport { PuzzleChange } from \"../puzzle-changes\";\nimport { PuzzleComponents } from \"../common-data-schema\";\n\n\ntype BruteSolverTileState = {\n    tile: Tile,\n    rotations: Array<number>\n}\ntype BruteSolverState = {\n    tilePosition: TilePosition,\n    tileState: BruteSolverTileState | null,\n    untriedTiles: Array<BruteSolverTileState>,\n    rejectedTiles: Array<BruteSolverTileState>\n}\n\n\nabstract class BruteSolverBase extends IterativeSolverBase {\n\n    private readonly _solverStack: Array<BruteSolverState> = [];\n    private _currentState: BruteSolverState;\n\n    constructor(puzzle: PuzzleComponents) {\n        super(puzzle);\n        // We expect to try every rotation of the set of Tiles for the initial state.\n        const untriedTiles = this._tilePool.tiles.map((tile) => {\n            return  {\n                tile: tile,\n                rotations: [0, 1, 2]\n            }\n        });\n        this._currentState = {\n            tilePosition: this._emptyTilePositions.shift()!,\n            tileState: null,\n            untriedTiles: untriedTiles,\n            rejectedTiles: new Array<BruteSolverTileState>()\n        }\n    }\n\n    private static rotateOrRemove(state: BruteSolverState): PuzzleChange {\n        let displayChange;\n        // Try the next rotation position for the current tile.\n        const tilePosition = state.tilePosition;\n        const tileState = state.tileState;\n        if (!tileState) {\n            throw new Error(\"TileState should not be null!\");\n        }\n        if (tileState.rotations.length > 0) {\n            const newRotations = tileState.rotations.shift()!;\n            // How many rotations are moving round from the current one.\n            const rotate = newRotations - tilePosition.state.rotations;\n            tilePosition.state.rotations = newRotations;\n            displayChange = IterativeSolverBase.rotate(tilePosition, rotate);\n        } else {\n            // If we've tried all the rotations and none match then reject this tile.\n            displayChange = IterativeSolverBase.remove(tilePosition);\n            tilePosition.state.removeTile();\n            state.rejectedTiles.push(tileState);\n        }\n        return displayChange;\n    }\n\n    protected abstract createNewState(state: BruteSolverState, tilePosition: TilePosition): BruteSolverState;\n\n    private tryNextTilePosition(state: BruteSolverState): PuzzleChange {\n        let displayChange;\n        // If there aren't any more tile positions a solution has been reached!\n        if (this._emptyTilePositions.length === 0) {\n            displayChange = IterativeSolverBase.solved(this.stateForDisplay());\n        } else {\n            // Save the current state, initialise a new state and move on.\n            this._solverStack.push(state);\n            this._currentState = this.createNewState(state, this._emptyTilePositions.shift()!);\n            displayChange = this.nextState();\n        }\n        return displayChange;\n    }\n\n    private tryNextTile(state: BruteSolverState): PuzzleChange {\n        let displayChange;\n        // If we have any untried tiles then try the next one.\n        const tilePosition = state.tilePosition;\n        if (state.untriedTiles.length > 0) {\n            state.tileState = state.untriedTiles.shift()!;\n            tilePosition.state.tile = state.tileState.tile;\n            if (state.tileState.rotations.length === 0) {\n                throw new Error(\"There should be at least one rotation position for an untried Tile!\");\n            }\n            tilePosition.state.rotations = state.tileState.rotations.shift()!;\n            displayChange = IterativeSolverBase.add(tilePosition);\n        } else {\n            // Otherwise if we've tried all the tiles and nothing matches we need to move back a tile position.\n            this._emptyTilePositions.unshift(tilePosition);\n            // If we can't move back then we've tried every combination!\n            if (this._solverStack.length === 0) {\n                displayChange = IterativeSolverBase.completed(this.stateForDisplay());\n            } else {\n                this._currentState = this._solverStack.pop()!;\n                // Cycle through the rotations or remove the tile if nothing matches.\n                displayChange = BruteSolverBase.rotateOrRemove(this._currentState);\n            }\n        }\n        return displayChange;\n    }\n\n    nextState(): PuzzleChange {\n        let displayChange;\n        // If we don't have a tile at the current tile position.\n        const tilePosition = this._currentState.tilePosition;\n        if (tilePosition.state.isEmpty()) {\n            // Try the next tile.\n            displayChange = this.tryNextTile(this._currentState);\n        } else {\n            // If everything matches then move on to the next tile position.\n            if (tilePosition.tileMatches()) {\n                displayChange = this.tryNextTilePosition(this._currentState);\n            } else {\n                // Cycle through the rotations or remove the tile if nothing matches.\n                displayChange = BruteSolverBase.rotateOrRemove(this._currentState);\n            }\n        }\n        return displayChange;\n    }\n\n    forceNextState(): PuzzleChange {\n        return BruteSolverBase.rotateOrRemove(this._currentState);\n    }\n\n}\n\nexport { BruteSolverTileState, BruteSolverState, BruteSolverBase }\n","import { TilePosition } from \"../puzzle/tile-position\";\nimport { BruteSolverTileState, BruteSolverState, BruteSolverBase } from \"./solver-brute-base\";\nimport { PuzzleComponents } from \"../common-data-schema\";\n\n\nexport class BruteForceSolver extends BruteSolverBase {\n\n    constructor(puzzle: PuzzleComponents) {\n        super(puzzle);\n    }\n\n    protected createNewState(state: BruteSolverState, newTilePosition: TilePosition): BruteSolverState {\n        // Trying every possible tile and rotation combination.\n        const untriedTiles = state.untriedTiles.concat(state.rejectedTiles);\n        const newUntriedTiles = untriedTiles.map((untriedTile) => {\n            return  {\n                tile: untriedTile.tile,\n                rotations: [0, 1, 2]\n            }\n        });\n        return {\n            tilePosition: newTilePosition,\n            tileState: null,\n            untriedTiles: newUntriedTiles,\n            rejectedTiles: new Array<BruteSolverTileState>()\n        }\n    }\n\n}\n","import { PuzzleComponents } from \"../common-data-schema\";\nimport { TilePosition } from \"../puzzle/tile-position\";\nimport { BruteSolverBase, BruteSolverTileState, BruteSolverState } from \"./solver-brute-base\";\n\n\nexport class OnlyValidSolver extends BruteSolverBase {\n\n    constructor(puzzle: PuzzleComponents) {\n        super(puzzle);\n    }\n\n    protected createNewState(state: BruteSolverState, newTilePosition: TilePosition): BruteSolverState {\n        // Find existing sides to match.\n        const segmentsToFind = newTilePosition.segmentsToFind();\n        // Filter the unused tiles so we only try those that are relevant.\n        const newUntriedTiles = new Array<BruteSolverTileState>();\n        const newRejectedTiles = new Array<BruteSolverTileState>();\n        const untriedTiles = state.untriedTiles.concat(state.rejectedTiles);\n        for (const untriedTile of untriedTiles) {\n            const newTileState = {\n                tile: untriedTile.tile,\n                rotations: untriedTile.tile.hasSideSegments(segmentsToFind)\n            }\n            if (newTileState.rotations.length > 0) {\n                newUntriedTiles.push(newTileState);\n            } else {\n                newRejectedTiles.push(newTileState);\n            }\n        }\n        return {\n            tilePosition: newTilePosition,\n            tileState: null,\n            untriedTiles: newUntriedTiles,\n            rejectedTiles: newRejectedTiles\n        }\n    }\n\n}\n","class Side {\n\n    static readonly sideA = new Side(\"A\");\n    static readonly sideB = new Side(\"B\");\n    static readonly sideC = new Side(\"C\");\n\n    private readonly _side: string;\n\n    constructor(side: string) {\n        this._side = side;\n    }\n\n    static get numberOfSides(): number {\n        return 3;\n    }\n\n    static validateSide(side: string): Side {\n        switch (side) {\n            case \"A\":\n                return Side.sideA;\n            case \"B\":\n                return Side.sideB;\n            case \"C\":\n                return Side.sideC;\n            default:\n                throw new Error(`Side ${side} must be one of A, B or C!`);\n        }\n    }\n\n    toString(): string {\n        return this._side;\n    }\n\n}\n\nexport { Side }\n","module.exports={puzzle:\"simple\",numberOfTilesPerFace:1,faces:[{name:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"2\"}]}]},{name:\"2\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"4\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"4\"}]}]},{name:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"2\"}]}]},{name:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"3\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"3\"}]}]}]};","module.exports={puzzle:\"simple\",totalNumberOfTiles:4,tiles:[{tile:1,sideA:\"1010\",sideB:\"0010\",sideC:\"0010\"},{tile:2,sideA:\"0100\",sideB:\"0100\",sideC:\"1001\"},{tile:3,sideA:\"0101\",sideB:\"1001\",sideC:\"1010\"},{tile:4,sideA:\"0010\",sideB:\"0100\",sideC:\"0101\"}]};","import layout_data from \"../data/simple-layout-data.json\";\nimport tile_data from \"../data/simple-tile-data.json\";\nimport { PuzzleDataElements } from \"./common-data-schema\";\n\n\nconst simplePuzzle: PuzzleDataElements = {\n    layoutData: layout_data,\n    tileData: tile_data\n}\n\nexport { simplePuzzle }\n","module.exports={puzzle:\"pocket\",numberOfTilesPerFace:4,faces:[{name:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"2\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"1\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"2\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"1\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"1\"}]}]},{name:\"2\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"4\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"2\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"4\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"4\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"2\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"2\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"2\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"2\"}]}]},{name:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"4\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"3\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"2\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"2\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"3\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"3\"}]}]},{name:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"3\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"3\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"4\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"3\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"4\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"4\"}]}]}]};","module.exports={puzzle:\"pocket\",totalNumberOfTiles:16,tiles:[{tile:1,sideA:\"0011\",sideB:\"0010\",sideC:\"0001\"},{tile:2,sideA:\"1000\",sideB:\"0001\",sideC:\"0110\"},{tile:3,sideA:\"0110\",sideB:\"1000\",sideC:\"0100\"},{tile:4,sideA:\"0100\",sideB:\"0100\",sideC:\"1000\"},{tile:5,sideA:\"1110\",sideB:\"0011\",sideC:\"1000\"},{tile:6,sideA:\"1000\",sideB:\"0011\",sideC:\"1000\"},{tile:7,sideA:\"1100\",sideB:\"1100\",sideC:\"0011\"},{tile:8,sideA:\"1000\",sideB:\"1100\",sideC:\"0110\"},{tile:9,sideA:\"0011\",sideB:\"0110\",sideC:\"0110\"},{tile:10,sideA:\"0001\",sideB:\"0110\",sideC:\"1100\"},{tile:11,sideA:\"0111\",sideB:\"0001\",sideC:\"0001\"},{tile:12,sideA:\"0001\",sideB:\"0100\",sideC:\"0001\"},{tile:13,sideA:\"0110\",sideB:\"0010\",sideC:\"0001\"},{tile:14,sideA:\"0001\",sideB:\"1000\",sideC:\"0010\"},{tile:15,sideA:\"1100\",sideB:\"0110\",sideC:\"0110\"},{tile:16,sideA:\"0010\",sideB:\"0110\",sideC:\"1000\"}]};","import layout_data from \"../data/pocket-layout-data.json\";\nimport tile_data from \"../data/pocket-tile-data.json\";\nimport { PuzzleDataElements } from \"./common-data-schema\";\n\n\nconst pocketPuzzle: PuzzleDataElements = {\n    layoutData: layout_data,\n    tileData: tile_data\n}\n\nexport { pocketPuzzle }\n","module.exports={puzzle:\"great\",numberOfTilesPerFace:9,faces:[{name:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"5\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"9\",onFace:\"2\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"1\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"6\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"7\",onFace:\"2\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"1\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"7\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"8\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"1\"}]},{position:\"5\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"6\",onFace:\"1\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"9\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"5\",onFace:\"2\"}]},{position:\"6\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"7\",onFace:\"1\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"5\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"1\"}]},{position:\"7\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"8\",onFace:\"1\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"7\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"6\",onFace:\"1\"}]},{position:\"8\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"9\",onFace:\"1\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"7\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"1\"}]},{position:\"9\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"9\",onFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"5\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"8\",onFace:\"1\"}]}]},{name:\"2\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"4\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"2\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"4\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"6\",onFace:\"2\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"4\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"2\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"2\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"2\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"8\",onFace:\"2\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"2\"}]},{position:\"5\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"6\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"5\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"9\",onFace:\"4\"}]},{position:\"6\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"7\",onFace:\"2\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"5\",onFace:\"2\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"2\"}]},{position:\"7\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"8\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"6\",onFace:\"2\"}]},{position:\"8\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"9\",onFace:\"2\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"7\",onFace:\"2\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"2\"}]},{position:\"9\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"5\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"8\",onFace:\"2\"}]}]},{name:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"4\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"3\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"2\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"6\",onFace:\"3\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"2\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"3\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"8\",onFace:\"3\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"3\"}]},{position:\"5\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"6\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"9\",onFace:\"2\"}]},{position:\"6\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"7\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"5\",onFace:\"3\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"3\"}]},{position:\"7\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"8\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"6\",onFace:\"3\"}]},{position:\"8\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"9\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"7\",onFace:\"3\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"3\"}]},{position:\"9\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"5\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"9\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"8\",onFace:\"3\"}]}]},{name:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"3\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"3\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"4\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"6\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"3\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"4\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"8\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"4\"}]},{position:\"5\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"6\",onFace:\"4\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"9\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"9\",onFace:\"3\"}]},{position:\"6\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"7\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"5\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"4\"}]},{position:\"7\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"8\",onFace:\"4\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"7\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"6\",onFace:\"4\"}]},{position:\"8\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"9\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"7\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"4\"}]},{position:\"9\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"5\",onFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"5\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"8\",onFace:\"4\"}]}]}]};","module.exports={puzzle:\"great\",totalNumberOfTiles:36,tiles:[{tile:1,sideA:\"1000\",sideB:\"1000\",sideC:\"1000\"},{tile:2,sideA:\"0100\",sideB:\"1100\",sideC:\"0110\"},{tile:3,sideA:\"0110\",sideB:\"1100\",sideC:\"1110\"},{tile:4,sideA:\"0011\",sideB:\"1100\",sideC:\"0001\"},{tile:5,sideA:\"0001\",sideB:\"0111\",sideC:\"0001\"},{tile:6,sideA:\"0001\",sideB:\"0110\",sideC:\"1100\"},{tile:7,sideA:\"0010\",sideB:\"0100\",sideC:\"0110\"},{tile:8,sideA:\"0001\",sideB:\"1000\",sideC:\"1100\"},{tile:9,sideA:\"0001\",sideB:\"0110\",sideC:\"1000\"},{tile:10,sideA:\"1111\",sideB:\"0001\",sideC:\"0001\"},{tile:11,sideA:\"0110\",sideB:\"1000\",sideC:\"0011\"},{tile:12,sideA:\"0110\",sideB:\"0111\",sideC:\"1000\"},{tile:13,sideA:\"0001\",sideB:\"0001\",sideC:\"1110\"},{tile:14,sideA:\"0110\",sideB:\"0111\",sideC:\"1110\"},{tile:15,sideA:\"1000\",sideB:\"1110\",sideC:\"0110\"},{tile:16,sideA:\"0100\",sideB:\"0011\",sideC:\"1100\"},{tile:17,sideA:\"0001\",sideB:\"1110\",sideC:\"0010\"},{tile:18,sideA:\"0110\",sideB:\"0110\",sideC:\"0110\"},{tile:19,sideA:\"1000\",sideB:\"1110\",sideC:\"0100\"},{tile:20,sideA:\"1000\",sideB:\"0110\",sideC:\"0110\"},{tile:21,sideA:\"0001\",sideB:\"1000\",sideC:\"0110\"},{tile:22,sideA:\"0001\",sideB:\"0011\",sideC:\"0010\"},{tile:23,sideA:\"1000\",sideB:\"0111\",sideC:\"0001\"},{tile:24,sideA:\"1111\",sideB:\"0010\",sideC:\"1000\"},{tile:25,sideA:\"0001\",sideB:\"0001\",sideC:\"0011\"},{tile:26,sideA:\"1000\",sideB:\"0011\",sideC:\"0001\"},{tile:27,sideA:\"0100\",sideB:\"0110\",sideC:\"0100\"},{tile:28,sideA:\"1100\",sideB:\"0110\",sideC:\"0001\"},{tile:29,sideA:\"1000\",sideB:\"0011\",sideC:\"0011\"},{tile:30,sideA:\"0010\",sideB:\"0001\",sideC:\"0111\"},{tile:31,sideA:\"1000\",sideB:\"0011\",sideC:\"0111\"},{tile:32,sideA:\"1000\",sideB:\"1110\",sideC:\"0111\"},{tile:33,sideA:\"0100\",sideB:\"1100\",sideC:\"1000\"},{tile:34,sideA:\"0010\",sideB:\"1100\",sideC:\"0001\"},{tile:35,sideA:\"0010\",sideB:\"0001\",sideC:\"1000\"},{tile:36,sideA:\"0110\",sideB:\"1000\",sideC:\"1000\"}]};","import layout_data from \"../data/great-layout-data.json\";\nimport tile_data from \"../data/great-tile-data.json\";\nimport { PuzzleDataElements } from \"./common-data-schema\";\n\n\nconst greatPuzzle: PuzzleDataElements = {\n    layoutData: layout_data,\n    tileData: tile_data\n}\n\nexport { greatPuzzle }\n","import { IntegrityCheck, IntegrityCheckResult } from \"./integrity\";\nimport { Face } from \"./face\";\nimport { TilePosition } from \"./tile-position\";\nimport { Side } from \"./side\";\n\n\nexport class Tetrahedron implements IntegrityCheck {\n\n    static readonly FACES = 4;\n\n    private readonly _sidesMatchingWhenSolved: number;\n\n    private _tileSidesMatching: number = 0;\n\n    constructor(private readonly _name: string, private readonly _faces: Array<Face>) {\n        if (this._faces.length !== Tetrahedron.FACES) {\n            throw new Error(`Tetrahedron must always be configured with ${Tetrahedron.FACES} Faces!`)\n        }\n        this._sidesMatchingWhenSolved = this.tilePositionCount * Side.numberOfSides;\n    }\n\n    integrityCheck(): IntegrityCheckResult {\n        // There must be 4 faces.\n        if (this._faces.length !== Tetrahedron.FACES) {\n            return [false, `Tetrahedron not configured with 4 faces: ${this.toString()}`];\n        }\n        //  Each face must have the same number of tile positions.\n        if (this.tilePositionCount % Tetrahedron.FACES !== 0) {\n            return [false, `Faces have differing Tile Position counts!`];\n        }\n        // The faces must all pass their full integrity checks.\n        for (const face of this._faces.values()) {\n            const faceIntegrity = face.fullIntegrityCheck();\n            if (!faceIntegrity[0]) {\n                return faceIntegrity;\n            }\n        }\n        return [true, \"Passed\"];\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get tilePositionCount(): number {\n        return this._faces.reduce((count, face) => count + face.tilePositionCount, 0);\n    }\n\n    get tileSidesMatching(): number {\n        return this._tileSidesMatching;\n    }\n\n    get tilePositions(): Array<TilePosition> {\n        return this._faces\n            .map((face) => face.tilePositions)\n            .reduce((allTilePositions, tilePositions) =>\n                allTilePositions.concat(tilePositions), new Array<TilePosition>());\n    }\n\n    get emptyTilePositions(): Array<TilePosition> {\n        return this._faces\n            .map((face) => face.emptyTilePositions)\n            .reduce((allEmptyTilePositions, tilePositions) =>\n                allEmptyTilePositions.concat(tilePositions), new Array<TilePosition>());\n    }\n\n    getFace(name: string): Face {\n        for (const face of this._faces) {\n            if (face.name === name) {\n                return face;\n            }\n        }\n        throw new Error(`Face (${name}) not found on Tetrahedron!`);\n    }\n\n    countTileSidesMatching(): number {\n        this._tileSidesMatching = this.tilePositions\n            .reduce((totalMatches, tilePosition) => totalMatches + tilePosition.sidesMatching(), 0);\n        return this._tileSidesMatching;\n    }\n\n    isSolved(): boolean {\n        return this._tileSidesMatching === this._sidesMatchingWhenSolved;\n    }\n\n    toString(): string {\n        let tetrahedronString = `Puzzle Type: ${this._name}\\n`;\n        this._faces.forEach(face => tetrahedronString += face.toString());\n        return tetrahedronString;\n    }\n\n}\n","import { IntegrityCheck, IntegrityCheckResult } from \"./integrity\";\nimport { Tile } from \"./tile\";\nimport { TilePosition } from \"./tile-position\";\nimport { Side } from \"./side\";\n\n\ntype FaceJoinProperties = {\n    readonly fromSide: Side,\n    readonly toSide: Side,\n    readonly ofFace: Face\n}\n\n\nexport class Face implements IntegrityCheck {\n\n    static readonly FACE_NAMES = [\"1\", \"2\", \"3\", \"4\"];\n    static readonly VALID_TILE_COUNTS = [1, 4, 9];\n\n    private readonly _joins = new Array<FaceJoinProperties>();\n\n    constructor(private readonly _name: string, private readonly _tilePositions: Map<string, TilePosition>) {\n        if (!(Face.FACE_NAMES.includes(_name))) {\n            throw new Error(`Face must always be configured with one of the following names [${Face.FACE_NAMES}]!`);\n        }\n        if (!(Face.VALID_TILE_COUNTS.includes(this._tilePositions.size))) {\n            throw new Error(`Face must always be configured with one of ${Face.VALID_TILE_COUNTS} TilePositions!`);\n        }\n    }\n\n    integrityCheck(): IntegrityCheckResult {\n        // Each face must join to 3 other faces and must have a valid number of tile positions.\n        if (this._joins.length !== Side.numberOfSides) {\n            return [false, `Face joins not complete: ${this.toString()}`];\n        }\n        if (!Face.VALID_TILE_COUNTS.includes(this._tilePositions.size)) {\n            return [false, `Invalid number of tile positions on Face: ${this.toString()}`];\n        }\n        return [true, \"Passed\"];\n    }\n\n    fullIntegrityCheck(): IntegrityCheckResult {\n        const faceIntegrity = this.integrityCheck();\n        if (!faceIntegrity[0]) {\n            return faceIntegrity;\n        }\n        for (const tilePosition of this._tilePositions.values()) {\n            const tileIntegrity = tilePosition.integrityCheck();\n            if (!tileIntegrity[0]) {\n                return tileIntegrity;\n            }\n        }\n        return faceIntegrity;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get tilePositionCount(): number {\n        return this._tilePositions.size;\n    }\n\n    get tilePositions(): Array<TilePosition> {\n        return Array.from(this._tilePositions.values());\n    }\n\n    get emptyTilePositions(): TilePosition[] {\n        return Array.from(this._tilePositions.values()).filter(tilePosition => tilePosition.state.isEmpty());\n    }\n\n    hasEmptyTilePositions(): boolean {\n        return this.emptyTilePositions.length > 0;\n    }\n\n    getTilePosition(position: string): TilePosition {\n        if (this._tilePositions.has(position)) {\n            return this._tilePositions.get(position)!;\n        }\n        throw new Error(`TilePosition (${position}) not found on Face (${this.name})!`);\n    }\n\n    getTileAtPosition(position: string): Tile | null {\n        return this.getTilePosition(position).state.tile;\n    }\n\n    join(joinFrom: string, joinTo: string, ofFace: Face) : void {\n        if (this._joins.length === Side.numberOfSides) {\n            throw new Error(\"Faces can only join to three other faces!\");\n        }\n        if (this === ofFace) {\n            throw new Error(\"Cannot join a Face to itself!\");\n        }\n        if (this.tilePositionCount !== ofFace.tilePositionCount) {\n            throw new Error(\"Cannot join Faces which have differing numbers of Tile Positions!\");\n        }\n        const fromSide = Side.validateSide(joinFrom);\n        const toSide = Side.validateSide(joinTo);\n        if (this._joins.some((face) => face.fromSide.toString() === joinFrom)) {\n            throw new Error(`Existing join already present for side ${joinFrom}!`);\n        }\n        this._joins.push({\n            fromSide: fromSide,\n            toSide: toSide,\n            ofFace: ofFace\n        });\n    }\n\n    toString(): string {\n        let faceString = `Face: ${this._name}, Tile Positions: ${this.tilePositionCount}, Joins: `;\n        this._joins.forEach((join) =>\n            faceString += `(${this._name}-${join.fromSide}->${join.ofFace.name}-${join.toSide})`);\n        faceString += '\\n';\n        this._tilePositions.forEach(tilePosition => faceString += tilePosition.toString() + '\\n');\n        return faceString;\n    }\n\n}\n","import { Tile } from \"./tile\";\n\n\nexport class TilePositionState {\n\n    private _tile: Tile | null = null;\n    private _rotations: number = 0;\n\n    constructor() {}\n\n    get tile(): Tile {\n        if (this._tile === null) {\n            throw new Error(\"Can't fetch a Tile from a TilePositionState when there isn't one set!\");\n        }\n        return this._tile;\n    }\n\n    set tile(tile: Tile) {\n        if (!this.isEmpty()) {\n            throw new Error(\"Can't set a Tile when the TilePositionState already has one!\");\n        }\n        this._rotations = 0;\n        this._tile = tile;\n    }\n\n    get rotations(): number {\n        return this._rotations;\n    }\n\n    set rotations(rotations: number) {\n        if (this.isEmpty()) {\n            throw new Error(\"No point setting rotations when the TilePositionState doesn't have a Tile!\");\n        }\n        if (rotations !== 0 && rotations !== 1 && rotations !== 2) {\n            throw new Error(\"Tile can only be rotated 0, 1 or 2 times!\");\n        }\n        this._rotations = rotations\n    }\n\n    isEmpty(): boolean {\n        return !this._tile;\n    }\n\n    removeTile(): Tile {\n        if (this.isEmpty()) {\n            throw new Error(\"No Tile to remove from the TilePositionState!\");\n        }\n        let tileToRemove = this._tile!;\n        this._tile = null;\n        return tileToRemove;\n    }\n\n    rotate(): boolean {\n        if (this.isEmpty()) {\n            throw new Error(\"No point calling rotate when the TilePositionState doesn't have a Tile!\");\n        }\n        this._rotations = ++this._rotations % 3;\n        return this._rotations !== 0;\n    }\n\n    toString(): string {\n        if (this.isEmpty()) {\n            return \"[Empty]\";\n        } else {\n            return `[Rotations: ${this.rotations}, Tile: ${this.tile}]`;\n        }\n    }\n\n}\n","import { IntegrityCheck, IntegrityCheckResult } from \"./integrity\";\nimport { TilePositionState } from \"./tile-position-state\";\nimport { Side } from \"./side\";\n\n\ntype TilePositionJoinProperties = {\n    readonly fromSide: Side,\n    readonly toSide: Side,\n    readonly ofTilePosition: TilePosition\n}\n\n\nexport class TilePosition implements IntegrityCheck {\n\n    private _joins = new Array<TilePositionJoinProperties>();\n    private _state: TilePositionState = new TilePositionState();\n\n    constructor(private _name: string, private _onFace: string) {}\n\n    integrityCheck(): IntegrityCheckResult {\n        // Each tile position must join to 3 other tile positions.\n        if (this._joins.length === Side.numberOfSides) {\n            return [true, \"Passed\"];\n        }\n        return [false, `Tile position joins not complete: ${this.toString()}`];\n    }\n\n    get id(): string {\n        return this._onFace + \"-\" + this._name;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get state(): TilePositionState {\n        return this._state;\n    }\n\n    set state(state: TilePositionState)  {\n        this._state = state;\n    }\n\n    join(joinFrom: string, joinTo: string, ofTilePosition: TilePosition) : void {\n        if (this._joins.length === Side.numberOfSides) {\n            throw new Error(\"TilePositions can only join to three other TilePositions!\");\n        }\n        if (this === ofTilePosition) {\n            throw new Error(\"Cannot join a TilePosition to itself!\");\n        }\n        const fromSide = Side.validateSide(joinFrom);\n        const toSide = Side.validateSide(joinTo);\n        for (const join of this._joins) {\n            if (join.fromSide.toString() === joinFrom) {\n                throw new Error(`Existing join already present for side ${joinFrom}!`);\n            }\n        }\n        this._joins.push({\n            fromSide: fromSide,\n            toSide: toSide,\n            ofTilePosition: ofTilePosition\n        });\n    }\n\n    private sideMatches(join: TilePositionJoinProperties): boolean {\n        // If the other TilePosition is empty then that will count as a match.\n        const otherState = join.ofTilePosition.state;\n        if (!otherState.isEmpty()) {\n            // At this TilePosition we need the side of the Tile facing the other TilePosition.\n            const thisSegments = this.state.tile.getSegmentsForSide(this.state.rotations, join.fromSide);\n            // For the other TilePosition we then need the side of the Tile there, facing this TilePosition.\n            const otherSegments = otherState.tile.getSegmentsForSideToMatchWith(otherState.rotations, join.toSide);\n            // Finally we can make the comparison. Any failure means the current Tile doesn't match at this TilePosition.\n            if (thisSegments !== otherSegments) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sidesMatching(): number {\n        if (this.state.isEmpty()) {\n            return 0;\n        }\n        // Count the matching sides for each join to another TilePosition.\n        return this._joins.reduce((matches, join) => matches + (this.sideMatches(join) ? 1 : 0), 0);\n    }\n\n    tileMatches(): boolean {\n        // Check that all the sides match.\n        return this.sidesMatching() == this._joins.length;\n    }\n\n    private static sideSegments(join: TilePositionJoinProperties): string {\n        const otherState = join.ofTilePosition.state;\n        if (otherState.isEmpty()) {\n            // If no Tile search can be for anything.\n            return \"....\";\n        } else {\n            // If a Tile is present then we need the side of the Tile facing this TilePosition.\n            return otherState.tile.getSegmentsForSideToMatchWith(otherState.rotations, join.toSide);\n        }\n    }\n\n    segmentsToFind(): string {\n        if (!this.state.isEmpty()) {\n            throw new Error(\"TilePosition to find segments for already contains a Tile!\");\n        }\n        let needToMatch: string = \"\";\n        // Check each join to another TilePosition.\n        for (const join of this._joins) {\n            needToMatch += TilePosition.sideSegments(join);\n        }\n        return needToMatch;\n    }\n\n    toString(): string {\n        let tilePositionString = `TilePosition: ${this._name}, On Face: ${this._onFace}, Contains Tile: ${this.state.toString()}, Joins: `;\n        this._joins.forEach((join) =>\n            tilePositionString += `(${this._name}-${join.fromSide}->${join.ofTilePosition._onFace}-${join.ofTilePosition.name}-${join.toSide})`);\n        return tilePositionString;\n    }\n\n}\n","import { TileDefinition } from \"./tile-data-schema\";\nimport { Side } from \"./side\";\n\n\nclass SideSegments {\n\n    constructor(private readonly _sideA: string, private readonly _sideB: string, private readonly _sideC: string) {}\n\n    getSegments(side: Side): string {\n        switch (side) {\n            case Side.sideA:\n                return this._sideA;\n            case Side.sideB:\n                return this._sideB;\n            case Side.sideC:\n                return this._sideC;\n            default:\n                throw new Error(\"Unexpected value of Side!\");\n        }\n    }\n\n    toString(): string {\n        return this._sideA + this._sideB + this._sideC;\n    }\n\n}\n\nexport class Tile {\n\n    private readonly _id: number;\n    private readonly _sideSegments = new Array<SideSegments>();\n\n    validateSegments(segments: string): string {\n        if (segments.length !== 4) {\n            throw new Error(`Segment coding should be four characters, found '${segments}'!`);\n        }\n        if (!segments.match(/^[0|1]+$/)) {\n            throw new Error(`Segment coding can only contain '1' or '0', found '${segments}'!`);\n        }\n        return segments;\n    }\n\n    constructor(tileDetails: TileDefinition) {\n        this._id = tileDetails.tile;\n        const segments = new SideSegments(\n            this.validateSegments(tileDetails.sideA),\n            this.validateSegments(tileDetails.sideB),\n            this.validateSegments(tileDetails.sideC));\n        this._sideSegments.push(segments);\n        this._sideSegments.push(new SideSegments(segments.getSegments(Side.sideC), segments.getSegments(Side.sideA), segments.getSegments(Side.sideB)));\n        this._sideSegments.push(new SideSegments(segments.getSegments(Side.sideB), segments.getSegments(Side.sideC), segments.getSegments(Side.sideA)));\n    }\n\n    get id(): number {\n        return this._id;\n    }\n\n    get segments(): string {\n        return this._sideSegments[0].toString();\n    }\n\n    getSegmentsForSide(rotations: number, side: Side): string {\n        return this._sideSegments[rotations].getSegments(side);\n    }\n\n    getSegmentsForSideToMatchWith(rotations: number, side: Side): string {\n        const sideSegments = this.getSegmentsForSide(rotations, side);\n        return sideSegments[3] + sideSegments[2] + sideSegments[1] + sideSegments[0];\n    }\n\n    hasSideSegments(findSideSegments: string): Array<number> {\n        const onRotations = new Array<number>();\n        for (let rotation = 0; rotation < 3; rotation++) {\n            if (!!this._sideSegments[rotation].toString().match(findSideSegments)) {\n                onRotations.push(rotation);\n            }\n        }\n        return onRotations;\n    }\n\n    toString(): string {\n        return `Id: ${this._id}, ` +\n            `Side-A: ${this.getSegmentsForSide(0, Side.sideA)}, ` +\n            `Side-B: ${this.getSegmentsForSide(0, Side.sideB)}, ` +\n            `Side-C: ${this.getSegmentsForSide(0, Side.sideC)}`;\n    }\n\n}\n","import { Tile } from \"./tile\";\nimport { TileDefinition } from \"./tile-data-schema\";\nimport { getRandomInt } from \"../utils\";\n\n\nexport class TilePool {\n\n    // Static tile used to test the tile orientation display.\n    private static readonly DISPLAY_TEST_TILE = new Tile({\n        tile: 0,\n        sideA: \"1000\",\n        sideB: \"0100\",\n        sideC: \"0010\"\n    });\n\n    private readonly _tiles = new Map<number, Tile>();\n\n    constructor(numberOfTiles: number, tileData: TileDefinition[]) {\n        if (numberOfTiles !== tileData.length) {\n            throw new Error(`Number of tiles provided (${tileData.length}) does not match number expected (${numberOfTiles})!`);\n        }\n        for (const tileDetails of tileData) {\n            if (!this.addTile(tileDetails)) {\n                throw new Error(`Duplicate Tile found in pool for (${tileDetails.tile})!`);\n            }\n        }\n    }\n\n    addTile(tileDetails: TileDefinition): boolean {\n        if (this._tiles.has(tileDetails.tile)) {\n            return false;\n        }\n        const newTile = new Tile(tileDetails);\n        this._tiles.set(newTile.id, newTile);\n        return true;\n    }\n\n    get tileCount(): number {\n        return this._tiles.size;\n    }\n\n    get isEmpty(): boolean {\n        return this.tileCount === 0;\n    }\n\n    get tiles(): Array<Tile> {\n        return Array.from(this._tiles.values());\n    }\n\n    getTile(id: number): Tile {\n        if (this._tiles.has(id)) {\n            const tile = this._tiles.get(id)!;\n            this._tiles.delete(id);\n            return tile;\n        }\n        throw new Error(`Tile (${id}) not found in the tile pool!`);\n    }\n\n    get nextTile(): Tile {\n        if (this.isEmpty) {\n            throw new Error(\"No more Tiles in the pool!\");\n        }\n        // Sort keys in ascending numerical order.\n        const keys = Array.from(this._tiles.keys()).sort((a: number, b: number) => a - b);\n        return this.getTile(keys[0]);\n    }\n\n    get randomTile(): Tile {\n        if (this.isEmpty) {\n            throw new Error(\"No more Tiles in the pool!\");\n        }\n        const keys = Array.from(this._tiles.keys());\n        const id = keys[getRandomInt(keys.length)];\n        return this.getTile(id);\n    }\n\n    get displayTestTile(): Tile {\n        if (this.isEmpty) {\n            throw new Error(\"No more Tiles in the pool!\");\n        }\n        // Discard a random tile.\n        this.randomTile;\n        // Always return the same test tile.\n        return TilePool.DISPLAY_TEST_TILE;\n    }\n\n    returnTile(tile: Tile): void {\n        if (this._tiles.has(tile.id)) {\n            throw new Error(\"Returned Tile already in the pool!\");\n        }\n        this._tiles.set(tile.id, tile);\n    }\n\n    toString(): string {\n        let tilesString = \"TilePool:\\n\";\n        this._tiles.forEach((tile) => tilesString += tile.toString() + '\\n');\n        return tilesString;\n    }\n\n}\n","import { simplePuzzle } from \"./simple-puzzle\";\nimport { pocketPuzzle } from \"./pocket-puzzle\";\nimport { greatPuzzle } from \"./great-puzzle\";\nimport { LayoutData, TilePositionData} from \"./puzzle/layout-data-schema\";\nimport { TileData } from \"./puzzle/tile-data-schema\";\nimport { Tetrahedron } from \"./puzzle/tetrahedron\";\nimport { Face } from \"./puzzle/face\";\nimport { TilePosition } from \"./puzzle/tile-position\";\nimport { TilePool } from \"./puzzle/tile-pool\";\nimport { PuzzleDataElements, PuzzleComponents } from \"./common-data-schema\";\n\n\nfunction getTilePool(tileData: TileData): TilePool {\n    return new TilePool(tileData.totalNumberOfTiles, tileData.tiles);\n}\n\nfunction buildFace(faceName: string, numberOfTiles: number, tilePositionData: TilePositionData[]): Face {\n    if (!(Face.FACE_NAMES.includes(faceName))) {\n        throw new Error(`Face name must be one of ${Face.FACE_NAMES}!`);\n    }\n    if (!(Face.VALID_TILE_COUNTS.includes(numberOfTiles))) {\n        throw new Error(`Number of Tile Positions on a Face must be one of ${Face.VALID_TILE_COUNTS}!`);\n    }\n    if (numberOfTiles !== tilePositionData.length) {\n        throw new Error(`Number of Tile Positions provided (${tilePositionData.length}) does not match number expected (${numberOfTiles})!`);\n    }\n    // We can't join the tile positions until they've been created for every face.\n    const tilePositions = tilePositionData\n        .map(tilePositionDetails => new TilePosition(tilePositionDetails.position, faceName))\n        .reduce((map, newTilePosition) => {\n                map.set(newTilePosition.name, newTilePosition);\n                return map;\n            }, new Map<string, TilePosition>());\n    return new Face(faceName, tilePositions);\n}\n\nfunction buildTetrahedron(layoutData: LayoutData): Tetrahedron {\n    if (layoutData.faces.length !== Tetrahedron.FACES) {\n        throw new Error(`Tetrahedron must always have configuration data for ${Tetrahedron.FACES} Faces!`)\n    }\n    // We have to create all of the face and tile positions before we can create the tetrahedron and join them together.\n    const faces = layoutData.faces\n        .map(faceDetails => buildFace(faceDetails.name, layoutData.numberOfTilesPerFace, faceDetails.tilePositions));\n    const tetrahedron = new Tetrahedron(layoutData.puzzle, faces);\n    layoutData.faces.forEach(faceDetails => {\n        const fromFace = tetrahedron.getFace(faceDetails.name);\n        // Join the faces...\n        faceDetails.joins\n            .forEach(joinData => fromFace.join(joinData.fromSide, joinData.toSide, tetrahedron.getFace(joinData.ofFace)));\n        // Join all the tile positions...\n        faceDetails.tilePositions.forEach(tilePositionDetails => {\n            const fromTilePosition = tetrahedron.getFace(faceDetails.name).getTilePosition(tilePositionDetails.position);\n            tilePositionDetails.joins.forEach(joinData => {\n                const toTilePosition = tetrahedron.getFace(joinData.onFace).getTilePosition(joinData.ofTilePosition);\n                fromTilePosition.join(joinData.fromSide, joinData.toSide, toTilePosition);\n            });\n        });\n    });\n    return tetrahedron;\n}\n\nfunction getTetrahedron(layoutData: LayoutData): Tetrahedron {\n    const tetrahedron = buildTetrahedron(layoutData);\n    const integrityCheck = tetrahedron.integrityCheck();\n    if (!integrityCheck[0]) {\n        throw new Error(integrityCheck[1]);\n    }\n    return tetrahedron;\n}\n\nfunction getPuzzleTypeData(puzzleType: string): PuzzleDataElements {\n    switch (puzzleType) {\n        case \"Simple\":\n            return simplePuzzle;\n        case \"Pocket\":\n            return pocketPuzzle;\n        case \"Great\":\n            return greatPuzzle;\n        default:\n            throw new Error(\"Invalid puzzle type option!\");\n    }\n}\n\nfunction getPuzzleComponents(puzzleType: string | PuzzleDataElements): PuzzleComponents {\n    let puzzleTypeData;\n    if (typeof(puzzleType) === \"string\") {\n        puzzleTypeData = getPuzzleTypeData(puzzleType);\n    } else {\n        puzzleTypeData = puzzleType;\n    }\n    const tilePool = getTilePool(puzzleTypeData.tileData);\n    const tetrahedron = getTetrahedron(puzzleTypeData.layoutData);\n    if (tilePool.tileCount !== tetrahedron.tilePositionCount) {\n        throw new Error(\"There must be enough Tiles to cover the Tetrahedron!\");\n    }\n    return {\n        tilePool: tilePool,\n        tetrahedron: tetrahedron\n    }\n}\n\nexport { getPuzzleComponents, buildTetrahedron }\n","import { SolverBase } from \"./solver-base\";\nimport { PuzzleChange } from \"../puzzle-changes\";\nimport { Tetrahedron } from \"../puzzle/tetrahedron\";\nimport { Side } from \"../puzzle/side\";\nimport { getPuzzleComponents } from \"../puzzle-loader\";\nimport { getRandomInt } from \"../utils\";\n\n\nclass Population {\n\n    private _population: Array<Tetrahedron>;\n    private readonly _selection: Array<number>;\n\n    private _memberWithMostSidesMatching: number;\n    private _totalMatchingAcrossAllMembers: number;\n\n    constructor(size: number, puzzleType: string) {\n        this._population = new Array<Tetrahedron>(size);\n        for (let i = 0; i < this._population.length; i++) {\n            const puzzle = getPuzzleComponents(puzzleType);\n            puzzle.tetrahedron.emptyTilePositions.forEach((tilePosition) => {\n                tilePosition.state.tile = puzzle.tilePool.randomTile;\n                tilePosition.state.rotations = getRandomInt(Side.numberOfSides);\n            });\n            this._population[i] = puzzle.tetrahedron;\n        }\n        this._memberWithMostSidesMatching = 0;\n        this._totalMatchingAcrossAllMembers = 0;\n        this._selection = new Array<number>(size);\n        this.evaluation();\n    }\n\n    evaluation(): boolean {\n        this._totalMatchingAcrossAllMembers = 0;\n        this._memberWithMostSidesMatching = 0;\n        for (let i = 0; i < this._population.length; i++) {\n            const sidesMatching = this._population[i].countTileSidesMatching();\n            if (sidesMatching > this._memberWithMostSidesMatching) {\n                this._memberWithMostSidesMatching = i;\n            }\n            this._totalMatchingAcrossAllMembers += sidesMatching;\n        }\n        for (let i = 0; i < this._population.length; i++) {\n            this._selection[i] = this._population[i].tileSidesMatching / this._totalMatchingAcrossAllMembers;\n        }\n        return this.bestSoFar().isSolved();\n    }\n\n    private selection(): Tetrahedron {\n        let selected = -1;\n        let r = Math.random();\n        while (r > 0) {\n            r -= this._selection[++selected];\n        }\n        return this._population[selected];\n    }\n\n    generation(): void {\n        const newPopulation = new Array<Tetrahedron>(this._population.length);\n        for (let i = 0; i < this._population.length; i++) {\n            newPopulation[i] = this.selection();\n        }\n        this._population = newPopulation;\n    }\n\n    private static mutate(tetrahedron: Tetrahedron): void {\n        const tilePositions = tetrahedron.tilePositions;\n        if (Math.random() > 0.5) {\n            tilePositions[getRandomInt(tilePositions.length)].state.rotate();\n        } else {\n            const swapFrom = getRandomInt(tilePositions.length);\n            const swapTo = getRandomInt(tilePositions.length);\n            if (swapFrom != swapTo) {\n                const swapState = tilePositions[swapFrom].state;\n                tilePositions[swapFrom].state = tilePositions[swapTo].state;\n                tilePositions[swapTo].state = swapState;\n            }\n        }\n    }\n\n    mutation(): void {\n        for (let i = 0; i < this._population.length; i++) {\n            if (Math.random() > 0.01) {\n                Population.mutate(this._population[i]);\n            }\n        }\n    }\n\n    bestSoFar(): Tetrahedron {\n        return this._population[this._memberWithMostSidesMatching];\n    }\n\n}\n\n\nexport class GeneticSolver extends SolverBase {\n\n    private static readonly POPULATION_SIZE = 10;\n\n    private readonly _population: Population;\n\n    constructor(puzzleType: string) {\n        super();\n        this._population = new Population(GeneticSolver.POPULATION_SIZE, puzzleType);\n    }\n\n    initialState(): PuzzleChange {\n        return GeneticSolver.current(this.stateForDisplay());\n    }\n\n    forceNextState(): PuzzleChange {\n        return this.nextState();\n    }\n\n    nextState(): PuzzleChange {\n        this._population.generation();\n        this._population.mutation();\n        if (this._population.evaluation()) {\n            return GeneticSolver.solved(this.stateForDisplay());\n        }\n        return GeneticSolver.current(this.stateForDisplay());\n    }\n\n    stateForDisplay(): Array<PuzzleChange> {\n        return this._population.bestSoFar().tilePositions\n            .map((tilePosition) => {\n                if (tilePosition.state.isEmpty()) {\n                    throw new Error(\"Not expecting an empty tile position!\");\n                } else {\n                    return SolverBase.set(tilePosition);\n                }\n            });\n    }\n\n}\n","import { SolverBase } from \"./solver-base\";\nimport { PuzzleChange } from \"../puzzle-changes\";\nimport { PuzzleComponents } from \"../common-data-schema\";\nimport { Tetrahedron } from \"../puzzle/tetrahedron\";\nimport { TilePool } from \"../puzzle/tile-pool\";\n\n\nexport class HumanSolver extends SolverBase {\n\n    protected readonly _tetrahedron: Tetrahedron;\n    protected readonly _tilePool: TilePool\n\n    constructor(puzzle: PuzzleComponents) {\n        super();\n        this._tetrahedron = puzzle.tetrahedron;\n        this._tilePool = puzzle.tilePool;\n    }\n\n    forceNextState(): PuzzleChange {\n        return PuzzleChange.INITIAL;\n    }\n\n    initialState(): PuzzleChange {\n        const displayChanges = this._tetrahedron.tilePositions\n            .map((tilePosition) => SolverBase.empty(tilePosition))\n            .concat(this._tilePool.tiles.map((tile) => SolverBase.startDraggable(tile)));\n        return SolverBase.current(displayChanges);\n    }\n\n    nextState(): PuzzleChange {\n        return PuzzleChange.INITIAL;\n    }\n\n    stateForDisplay(): Array<PuzzleChange> {\n        return [PuzzleChange.INITIAL];\n    }\n\n    moveTile(fromTilePositionId: string, toTilePositionId: string): PuzzleChange {\n        const fromTilePosition = this._tetrahedron.getFace(fromTilePositionId[0]).getTilePosition(fromTilePositionId[2]);\n        const toTilePosition = this._tetrahedron.getFace(toTilePositionId[0]).getTilePosition(toTilePositionId[2]);\n        if (toTilePosition.state.isEmpty()) {\n            toTilePosition.state.tile = fromTilePosition.state.removeTile();\n            return SolverBase.tileDraggable(toTilePosition);\n        }\n        return this.returnToTilePosition(fromTilePositionId);\n    }\n\n    placeTile(tileId: number, tilePositionId: string): PuzzleChange {\n        const tilePosition = this._tetrahedron.getFace(tilePositionId[0]).getTilePosition(tilePositionId[2]);\n        if (tilePosition.state.isEmpty()) {\n            tilePosition.state.tile = this._tilePool.getTile(tileId);\n            return SolverBase.tileDraggable(tilePosition);\n        }\n        return this.returnToStart(tileId);\n    }\n\n    removeTile(tilePositionId: string): PuzzleChange {\n        const tilePosition = this._tetrahedron.getFace(tilePositionId[0]).getTilePosition(tilePositionId[2]);\n        const tile = tilePosition.state.removeTile();\n        this._tilePool.returnTile(tile);\n        return SolverBase.startDraggable(tile);\n    }\n\n    returnToStart(tileId: number): PuzzleChange {\n        const tile = this._tilePool.getTile(tileId);\n        const puzzleChange = SolverBase.startDraggable(tile);\n        this._tilePool.returnTile(tile);\n        return puzzleChange;\n    }\n\n    returnToTilePosition(tilePositionId: string) {\n        const tilePosition = this._tetrahedron.getFace(tilePositionId[0]).getTilePosition(tilePositionId[2]);\n        return SolverBase.tileDraggable(tilePosition);\n    }\n\n    rotateTile(tilePositionId: string): PuzzleChange {\n        const tilePosition = this._tetrahedron.getFace(tilePositionId[0]).getTilePosition(tilePositionId[2]);\n        tilePosition.state.rotate();\n        return SolverBase.tileDraggable(tilePosition);\n    }\n\n    isSolved(): boolean {\n        this._tetrahedron.countTileSidesMatching();\n        return this._tetrahedron.isSolved();\n    }\n\n    solved(): PuzzleChange {\n        return SolverBase.solved(this.stateForDisplay());\n    }\n\n}\n","import { Solver } from \"./solver-base\";\nimport { NoMatchingSolver } from \"./solver-no-matching\";\nimport { BruteForceSolver } from \"./solver-brute-force\";\nimport { OnlyValidSolver } from \"./solver-only-valid\";\nimport { GeneticSolver } from \"./solver-genetic\";\nimport { HumanSolver } from \"./solver-human\";\nimport { getPuzzleComponents } from \"../puzzle-loader\";\n\n\ninterface SolverOptions {\n    puzzleType: string,\n    solveAlgorithm: string,\n    tileSelection: string,\n    tilePlacement: string,\n    tileRotation: string\n}\n\nfunction buildSolver(options: SolverOptions): Solver {\n    // Use the options from the UI to build a solver.\n    switch (options.solveAlgorithm) {\n        case \"NoMatching\":\n            return new NoMatchingSolver(getPuzzleComponents(options.puzzleType),\n                options.tileSelection, options.tilePlacement, options.tileRotation);\n        case \"Brute\":\n            return new BruteForceSolver(getPuzzleComponents(options.puzzleType));\n        case \"OnlyValid\":\n            return new OnlyValidSolver(getPuzzleComponents(options.puzzleType));\n        case \"Genetic\":\n            return new GeneticSolver(options.puzzleType);\n        case \"Human\":\n            return new HumanSolver(getPuzzleComponents(options.puzzleType));\n        default:\n            throw new Error(\"Invalid solve algorithm option!\");\n    }\n}\n\nexport { SolverOptions, buildSolver }\n","import { buildSolver } from \"./solver-factory\";\nimport { Solver } from \"./solver-base\";\nimport { WorkerParameters, WorkerResult } from \"../common-data-schema\";\n\n\nlet solver: Solver;\nlet stepCounter = 0;\n\nfunction solverWorker(parameters: WorkerParameters): WorkerResult {\n    // Build the solver if required.\n    let puzzleChange;\n    if (parameters.continue) {\n        puzzleChange = solver.forceNextState();\n        stepCounter++;\n    } else {\n        solver = buildSolver(parameters.solverOptions);\n        puzzleChange = solver.nextState();\n        stepCounter = 0;\n    }\n    // Run the solver until a solution is found.\n    while (!puzzleChange.isSolved() && !puzzleChange.isCompleted()) {\n        puzzleChange = solver.nextState();\n        stepCounter++;\n    }\n    // Return the result for display, including the final state.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\n    return {\n        solvedOrCompleted: puzzleChange.type,\n        stepCounter: stepCounter,\n        finalState: solver.stateForDisplay()\n    }\n}\n\nexport { solverWorker }\n","import { WorkerParameters, WorkerResult } from \"../common-data-schema\";\nimport { solverWorker } from \"./solver-worker\";\n\n\nonmessage = function (e: MessageEvent) {\n    // Extract the parameters from the message.\n    const parameters = <WorkerParameters> e.data;\n    // Call the actual worker then post the result back.\n    const result: WorkerResult = solverWorker(parameters);\n    // @ts-ignore\n    postMessage(result);\n}\n"]}