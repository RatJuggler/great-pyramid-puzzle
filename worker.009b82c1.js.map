{"version":3,"sources":["simple-layout-data.json","simple-tile-data.json","js/simple-puzzle.ts","pocket-layout-data.json","pocket-tile-data.json","js/pocket-puzzle.ts","great-layout-data.json","great-tile-data.json","js/great-puzzle.ts","js/side.ts","js/tile-position.ts","js/face.ts","js/tetrahedron.ts","js/tile.ts","js/utils.ts","js/tile-pool.ts","js/puzzle-loader.ts","js/puzzle-changes.ts","js/solver-base.ts","js/solver-no-matching.ts","js/solver-iterative-base.ts","js/solver-brute-force.ts","js/solver-only-valid.ts","js/solver-factory.ts","js/worker.ts"],"names":["module","exports","puzzle","numberOfTilesPerFace","faces","name","joins","fromSide","toSide","ofFace","tilePositions","position","ofTilePosition","onFace","totalNumberOfTiles","tiles","tile","sideA","sideB","sideC"],"mappings":"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","file":"worker.009b82c1.js","sourceRoot":"../src","sourcesContent":["module.exports={puzzle:\"simple\",numberOfTilesPerFace:1,faces:[{name:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"2\"}]}]},{name:\"2\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"4\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"4\"}]}]},{name:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"2\"}]}]},{name:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"3\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"3\"}]}]}]};","module.exports={puzzle:\"simple\",totalNumberOfTiles:4,tiles:[{tile:1,sideA:\"1010\",sideB:\"0010\",sideC:\"0010\"},{tile:2,sideA:\"0100\",sideB:\"0100\",sideC:\"1001\"},{tile:3,sideA:\"0101\",sideB:\"1001\",sideC:\"1010\"},{tile:4,sideA:\"0010\",sideB:\"0100\",sideC:\"0101\"}]};","import layout_data from \"../simple-layout-data.json\";\nimport tile_data from \"../simple-tile-data.json\";\nimport { PuzzleDataElements } from \"./common-data-schema\";\n\n\nconst simplePuzzle: PuzzleDataElements = {\n    layoutData: layout_data,\n    tileData: tile_data\n}\n\nexport { simplePuzzle }\n","module.exports={puzzle:\"pocket\",numberOfTilesPerFace:4,faces:[{name:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"2\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"1\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"2\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"1\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"1\"}]}]},{name:\"2\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"4\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"2\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"4\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"4\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"2\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"2\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"2\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"2\"}]}]},{name:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"4\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"3\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"2\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"2\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"3\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"3\"}]}]},{name:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"3\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"3\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"4\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"3\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"4\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"4\"}]}]}]};","module.exports={puzzle:\"pocket\",totalNumberOfTiles:16,tiles:[{tile:1,sideA:\"0011\",sideB:\"0010\",sideC:\"0001\"},{tile:2,sideA:\"1000\",sideB:\"0001\",sideC:\"0110\"},{tile:3,sideA:\"0110\",sideB:\"1000\",sideC:\"0100\"},{tile:4,sideA:\"0100\",sideB:\"0100\",sideC:\"1000\"},{tile:5,sideA:\"1110\",sideB:\"0011\",sideC:\"1000\"},{tile:6,sideA:\"1000\",sideB:\"0011\",sideC:\"1000\"},{tile:7,sideA:\"1100\",sideB:\"1100\",sideC:\"0011\"},{tile:8,sideA:\"1000\",sideB:\"1100\",sideC:\"0110\"},{tile:9,sideA:\"0011\",sideB:\"0110\",sideC:\"0110\"},{tile:10,sideA:\"0001\",sideB:\"0110\",sideC:\"1100\"},{tile:11,sideA:\"0111\",sideB:\"0001\",sideC:\"0001\"},{tile:12,sideA:\"0001\",sideB:\"0100\",sideC:\"0001\"},{tile:13,sideA:\"0110\",sideB:\"0010\",sideC:\"0001\"},{tile:14,sideA:\"0001\",sideB:\"1000\",sideC:\"0010\"},{tile:15,sideA:\"1100\",sideB:\"0110\",sideC:\"0110\"},{tile:16,sideA:\"0010\",sideB:\"0110\",sideC:\"1000\"}]};","import layout_data from \"../pocket-layout-data.json\";\nimport tile_data from \"../pocket-tile-data.json\";\nimport { PuzzleDataElements } from \"./common-data-schema\";\n\n\nconst pocketPuzzle: PuzzleDataElements = {\n    layoutData: layout_data,\n    tileData: tile_data\n}\n\nexport { pocketPuzzle }\n","module.exports={puzzle:\"great\",numberOfTilesPerFace:9,faces:[{name:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"5\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"9\",onFace:\"2\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"1\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"6\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"7\",onFace:\"2\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"1\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"7\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"8\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"1\"}]},{position:\"5\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"6\",onFace:\"1\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"9\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"5\",onFace:\"2\"}]},{position:\"6\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"7\",onFace:\"1\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"5\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"1\"}]},{position:\"7\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"8\",onFace:\"1\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"7\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"6\",onFace:\"1\"}]},{position:\"8\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"9\",onFace:\"1\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"7\",onFace:\"1\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"1\"}]},{position:\"9\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"9\",onFace:\"3\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"5\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"8\",onFace:\"1\"}]}]},{name:\"2\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"4\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"2\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"4\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"6\",onFace:\"2\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"4\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"2\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"2\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"2\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"8\",onFace:\"2\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"2\"}]},{position:\"5\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"6\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"5\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"9\",onFace:\"4\"}]},{position:\"6\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"7\",onFace:\"2\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"5\",onFace:\"2\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"2\"}]},{position:\"7\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"8\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"6\",onFace:\"2\"}]},{position:\"8\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"9\",onFace:\"2\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"7\",onFace:\"2\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"2\"}]},{position:\"9\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"5\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"8\",onFace:\"2\"}]}]},{name:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"2\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"4\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"3\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"2\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"3\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"6\",onFace:\"3\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"2\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"3\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"3\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"8\",onFace:\"3\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"3\"}]},{position:\"5\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"6\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"9\",onFace:\"2\"}]},{position:\"6\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"7\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"5\",onFace:\"3\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"3\"}]},{position:\"7\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"8\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"6\",onFace:\"3\"}]},{position:\"8\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"9\",onFace:\"3\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"7\",onFace:\"3\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"3\"}]},{position:\"9\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"5\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"9\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"8\",onFace:\"3\"}]}]},{name:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofFace:\"3\"}],tilePositions:[{position:\"1\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"1\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"3\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"1\",onFace:\"3\"}]},{position:\"2\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"3\",onFace:\"4\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"6\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"4\",onFace:\"3\"}]},{position:\"3\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"4\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"2\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"1\",onFace:\"4\"}]},{position:\"4\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"2\",onFace:\"2\"},{fromSide:\"B\",toSide:\"C\",ofTilePosition:\"8\",onFace:\"4\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"3\",onFace:\"4\"}]},{position:\"5\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"6\",onFace:\"4\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"9\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"9\",onFace:\"3\"}]},{position:\"6\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"7\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"5\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"2\",onFace:\"4\"}]},{position:\"7\",joins:[{fromSide:\"A\",toSide:\"B\",ofTilePosition:\"8\",onFace:\"4\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"7\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"6\",onFace:\"4\"}]},{position:\"8\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"9\",onFace:\"4\"},{fromSide:\"B\",toSide:\"A\",ofTilePosition:\"7\",onFace:\"4\"},{fromSide:\"C\",toSide:\"B\",ofTilePosition:\"4\",onFace:\"4\"}]},{position:\"9\",joins:[{fromSide:\"A\",toSide:\"C\",ofTilePosition:\"5\",onFace:\"2\"},{fromSide:\"B\",toSide:\"B\",ofTilePosition:\"5\",onFace:\"1\"},{fromSide:\"C\",toSide:\"A\",ofTilePosition:\"8\",onFace:\"4\"}]}]}]};","module.exports={puzzle:\"great\",totalNumberOfTiles:36,tiles:[{tile:1,sideA:\"1000\",sideB:\"1000\",sideC:\"1000\"},{tile:2,sideA:\"0100\",sideB:\"1100\",sideC:\"0110\"},{tile:3,sideA:\"0110\",sideB:\"1100\",sideC:\"1110\"},{tile:4,sideA:\"0011\",sideB:\"1100\",sideC:\"0001\"},{tile:5,sideA:\"0001\",sideB:\"0111\",sideC:\"0001\"},{tile:6,sideA:\"0001\",sideB:\"0110\",sideC:\"1100\"},{tile:7,sideA:\"0010\",sideB:\"0100\",sideC:\"0110\"},{tile:8,sideA:\"0001\",sideB:\"1000\",sideC:\"1100\"},{tile:9,sideA:\"0001\",sideB:\"0110\",sideC:\"1000\"},{tile:10,sideA:\"1111\",sideB:\"0001\",sideC:\"0001\"},{tile:11,sideA:\"0110\",sideB:\"1000\",sideC:\"0011\"},{tile:12,sideA:\"0110\",sideB:\"0111\",sideC:\"1000\"},{tile:13,sideA:\"0001\",sideB:\"0001\",sideC:\"1110\"},{tile:14,sideA:\"0110\",sideB:\"0111\",sideC:\"1110\"},{tile:15,sideA:\"1000\",sideB:\"1110\",sideC:\"0110\"},{tile:16,sideA:\"0100\",sideB:\"0011\",sideC:\"1100\"},{tile:17,sideA:\"0001\",sideB:\"1110\",sideC:\"0010\"},{tile:18,sideA:\"0110\",sideB:\"0110\",sideC:\"0110\"},{tile:19,sideA:\"1000\",sideB:\"1110\",sideC:\"0100\"},{tile:20,sideA:\"1000\",sideB:\"0110\",sideC:\"0110\"},{tile:21,sideA:\"0001\",sideB:\"1000\",sideC:\"0110\"},{tile:22,sideA:\"0001\",sideB:\"0011\",sideC:\"0010\"},{tile:23,sideA:\"1000\",sideB:\"0111\",sideC:\"0001\"},{tile:24,sideA:\"1111\",sideB:\"0010\",sideC:\"1000\"},{tile:25,sideA:\"0001\",sideB:\"0001\",sideC:\"0011\"},{tile:26,sideA:\"1000\",sideB:\"0011\",sideC:\"0001\"},{tile:27,sideA:\"0100\",sideB:\"0110\",sideC:\"0100\"},{tile:28,sideA:\"1100\",sideB:\"0110\",sideC:\"0001\"},{tile:29,sideA:\"1000\",sideB:\"0011\",sideC:\"0011\"},{tile:30,sideA:\"0010\",sideB:\"0001\",sideC:\"0111\"},{tile:31,sideA:\"1000\",sideB:\"0011\",sideC:\"0111\"},{tile:32,sideA:\"1000\",sideB:\"1110\",sideC:\"0111\"},{tile:33,sideA:\"0100\",sideB:\"1100\",sideC:\"1000\"},{tile:34,sideA:\"0010\",sideB:\"1100\",sideC:\"0001\"},{tile:35,sideA:\"0010\",sideB:\"0001\",sideC:\"1000\"},{tile:36,sideA:\"0110\",sideB:\"1000\",sideC:\"1000\"}]};","import layout_data from \"../great-layout-data.json\";\nimport tile_data from \"../great-tile-data.json\";\nimport { PuzzleDataElements } from \"./common-data-schema\";\n\n\nconst greatPuzzle: PuzzleDataElements = {\n    layoutData: layout_data,\n    tileData: tile_data\n}\n\nexport { greatPuzzle }\n","enum Side {SideA = 'A', SideB = 'B', SideC = 'C'}\n\nclass Sides {\n\n    private static readonly _sides = new Map<string, Side>([\n        [Side.SideA.toString(), Side.SideA],\n        [Side.SideB.toString(), Side.SideB],\n        [Side.SideC.toString(), Side.SideC]\n    ]);\n\n    constructor() {}\n\n    get numberOfSides(): number {\n        return Sides._sides.size;\n    }\n\n    validateSide(side: string, name: string): Side {\n        if (Sides._sides.has(side)) {\n            return Sides._sides.get(side)!;\n        }\n        throw new Error(`Side ${name} must be one of ${Side.SideA},${Side.SideB},${Side.SideC}!`);\n    }\n\n}\n\nconst SIDES = new Sides();\n\nexport { SIDES, Side }\n","import { Tile } from \"./tile\";\nimport { IntegrityCheckResult } from \"./common-data-schema\";\nimport { Side, SIDES } from \"./side\";\n\n\ntype TilePositionJoinProperties = {\n    readonly toSide: Side;\n    readonly ofTilePosition: TilePosition;\n}\n\n\nexport class TilePosition {\n\n    private _joins = new Map<Side, TilePositionJoinProperties>();\n    private _tile: Tile | null = null;\n\n    constructor(private _name: string, private _onFace: string) {}\n\n    integrityCheck(): IntegrityCheckResult {\n        // Each tile position must join to 3 other tile positions.\n        if (this._joins.size === SIDES.numberOfSides) {\n            return [true, \"Passed\"];\n        }\n        return [false, `Tile position joins not complete: ${this.toString()}`];\n    }\n\n    get id(): string {\n        return this._onFace + \"-\" + this._name;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get tile(): Tile {\n        if (this._tile === null) {\n            throw new Error(\"Can't fetch a Tile when there isn't one!\");\n        }\n        return this._tile;\n    }\n\n    set tile(tile: Tile) {\n        if (!this.isEmpty()) {\n            throw new Error(\"Can't place a Tile when the TilePosition is already filled!\");\n        }\n        this._tile = tile.placed();\n    }\n\n    join(fromSide: string, toSide: string, ofTilePosition: TilePosition) : void {\n        if (this._joins.size === SIDES.numberOfSides) {\n            throw new Error(\"TilePositions can only join to three other TilePositions!\");\n        }\n        if (this === ofTilePosition) {\n            throw new Error(\"Cannot join a TilePosition to itself!\");\n        }\n        const nFromSide = SIDES.validateSide(fromSide, \"to join from\");\n        const nToSide = SIDES.validateSide(toSide, \"to join to\");\n        if (this._joins.get(nFromSide)) {\n            throw new Error(`Existing join already present for side ${fromSide}!`);\n        }\n        this._joins.set(nFromSide, {\n            toSide: nToSide,\n            ofTilePosition: ofTilePosition\n        });\n    }\n\n    isEmpty(): boolean {\n        return !this._tile;\n    }\n\n    removeTile(): Tile {\n        if (this.isEmpty()) {\n            throw new Error(\"No Tile to remove!\");\n        }\n        let tileToRemove = this._tile!;\n        this._tile = null;\n        return tileToRemove;\n    }\n\n    tilesMatch(): boolean {\n        if (this.isEmpty()) {\n            throw new Error(\"Can't check if a Tile matches when there is no Tile at the TilePosition to match from!\");\n        }\n        // Check match for each join to another TilePosition.\n        for (const join of this._joins.entries()) {\n            // If the other TilePosition is empty then that will count as a match.\n            const otherTilePosition = join[1].ofTilePosition;\n            if (!otherTilePosition.isEmpty()) {\n                // At this TilePosition we need the side of the Tile facing the other TilePosition.\n                const thisSegments = this.tile.getSegmentsForSide(join[0]);\n                // For the other TilePosition we then need the side of the Tile there, facing this TilePosition.\n                const otherSegments = otherTilePosition.tile.getSegmentsForSideToMatchWith(join[1].toSide);\n                // Finally we can make the comparison. Any failure means the current Tile doesn't match at this TilePosition.\n                if (thisSegments !== otherSegments) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    segmentsToFind(): string {\n        if (!this.isEmpty()) {\n            throw new Error(\"TilePosition to find segments for already contains a Tile!\");\n        }\n        let needToMatch: string = \"\";\n        // Check each join to another TilePosition.\n        for (const join of this._joins.entries()) {\n            const otherTilePosition = join[1].ofTilePosition;\n            if (otherTilePosition.isEmpty()) {\n                // If no Tile search can be for anything.\n                needToMatch += \"....\";\n            } else {\n                // If a Tile is present then we need the side of the Tile facing this TilePosition.\n                needToMatch += otherTilePosition.tile.getSegmentsForSideToMatchWith(join[1].toSide);\n            }\n        }\n        return needToMatch;\n    }\n\n    toString(): string {\n        const tileString = this._tile ? this._tile.toString() : \"Empty\"\n        let tilePositionString = `TilePosition: ${this._name}, On Face: ${this._onFace}, ` + `Contains Tile: [${tileString}], Joins: `;\n        this._joins.forEach((join, side) =>\n            tilePositionString += `(${this._name}-${side}->${join.ofTilePosition._onFace}-${join.ofTilePosition.name}-${join.toSide})`);\n        return tilePositionString;\n    }\n\n}\n","import { Tile } from \"./tile\";\nimport { TilePosition } from \"./tile-position\";\nimport { TilePositionData} from \"./layout-data-schema\";\nimport { IntegrityCheckResult } from \"./common-data-schema\";\nimport { Side, SIDES } from \"./side\";\n\n\ntype FaceJoinProperties = {\n    readonly toSide: Side;\n    readonly ofFace: Face;\n}\n\n\nexport class Face {\n\n    private static readonly FACE_NAMES = [\"1\", \"2\", \"3\", \"4\"];\n    private static readonly VALID_TILE_COUNTS = [1, 4, 9];\n\n    private readonly _joins = new Map<Side, FaceJoinProperties>();\n    private readonly _tilePositions = new Map<string, TilePosition>();\n\n    constructor(private _name: string, numberOfTiles: number, tilePositions: TilePositionData[]) {\n        if (!(Face.FACE_NAMES.includes(_name))) {\n            throw new Error(`Face name must be one of ${Face.FACE_NAMES}!`);\n        }\n        if (!(Face.VALID_TILE_COUNTS.includes(numberOfTiles))) {\n            throw new Error(`Number of Tile Positions on a Face must be one of ${Face.VALID_TILE_COUNTS}!`);\n        }\n        if (numberOfTiles !== tilePositions.length) {\n            throw new Error(`Number of Tile Positions provided (${tilePositions.length}) does not match number expected (${numberOfTiles})!`);\n        }\n        // We can't join the tile positions until they've been created for every face.\n        for (const tilePositionData of tilePositions) {\n            const newTilePosition = new TilePosition(tilePositionData.position, this._name);\n            this._tilePositions.set(newTilePosition.name, newTilePosition);\n        }\n    }\n\n    integrityCheck(): IntegrityCheckResult {\n        // Each face must join to 3 other faces and must have a valid number of tile positions.\n        if (this._joins.size !== SIDES.numberOfSides) {\n            return [false, `Face joins not complete: ${this.toString()}`];\n        }\n        if (!Face.VALID_TILE_COUNTS.includes(this._tilePositions.size)) {\n            return [false, `Invalid number of tile positions on Face: ${this.toString()}`];\n        }\n        return [true, \"Passed\"];\n    }\n\n    fullIntegrityCheck(): IntegrityCheckResult {\n        const faceIntegrity = this.integrityCheck();\n        if (!faceIntegrity[0]) {\n            return faceIntegrity;\n        }\n        for (const tilePosition of this._tilePositions.values()) {\n            const tileIntegrity = tilePosition.integrityCheck();\n            if (!tileIntegrity[0]) {\n                return tileIntegrity;\n            }\n        }\n        return faceIntegrity;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get tilePositionCount(): number {\n        return this._tilePositions.size;\n    }\n\n    get tilePositions(): Array<TilePosition> {\n        return Array.from(this._tilePositions.values());\n    }\n\n    getTilePosition(position: string): TilePosition {\n        if (this._tilePositions.has(position)) {\n            return this._tilePositions.get(position)!;\n        }\n        throw new Error(`TilePosition (${position}) not found on Face (${this.name})!`);\n    }\n\n    getTileAtPosition(position: string): Tile | null {\n        return this.getTilePosition(position).tile;\n    }\n\n    join(fromSide: string, toSide: string, ofFace: Face) : void {\n        if (this._joins.size === SIDES.numberOfSides) {\n            throw new Error(\"Faces can only join to three other faces!\");\n        }\n        if (this === ofFace) {\n            throw new Error(\"Cannot join a Face to itself!\");\n        }\n        if (this.tilePositionCount !== ofFace.tilePositionCount) {\n            throw new Error(\"Cannot join Faces which have differing numbers of Tile Positions!\");\n        }\n        const nFromSide = SIDES.validateSide(fromSide, \"to join from\");\n        const nToSide = SIDES.validateSide(toSide, \"to join to\");\n        if (this._joins.get(nFromSide)) {\n            throw new Error(`Existing join already present for side ${fromSide}!`);\n        }\n        this._joins.set(nFromSide, {\n            toSide: nToSide,\n            ofFace: ofFace\n        });\n    }\n\n    get emptyTilePositions(): TilePosition[] {\n        return Array.from(this._tilePositions.values()).filter(tilePosition => tilePosition.isEmpty());\n    }\n\n    hasEmptyTilePositions(): boolean {\n        return this.emptyTilePositions.length > 0;\n    }\n\n    toString(): string {\n        let faceString = `Face: ${this._name}, Tile Positions: ${this.tilePositionCount}, Joins: `;\n        this._joins.forEach((join, side) =>\n            faceString += `(${this._name}-${side}->${join.ofFace.name}-${join.toSide})`);\n        faceString += '\\n';\n        this._tilePositions.forEach(tilePosition => faceString += tilePosition.toString() + '\\n');\n        return faceString;\n    }\n\n}\n","import { Face } from \"./face\";\nimport { FaceData } from \"./layout-data-schema\";\nimport { TilePosition } from \"./tile-position\";\nimport { IntegrityCheckResult } from \"./common-data-schema\";\n\n\nexport class Tetrahedron {\n\n    private static readonly FACES = 4;\n\n    private readonly _faces = new Map<string, Face>();\n\n    constructor(private _name: string, numberOfTilesPerFace: number, faceData: FaceData[]) {\n        if (faceData.length !== Tetrahedron.FACES) {\n            throw new Error(`Tetrahedron must always have configuration data for ${Tetrahedron.FACES} Faces!`)\n        }\n        // We have to create all of the face and tile positions before we can join them together.\n        for (const faceDetails of faceData) {\n            const newFace = new Face(faceDetails.name, numberOfTilesPerFace, faceDetails.tilePositions);\n            this._faces.set(newFace.name, newFace);\n        }\n        for (const faceDetails of faceData) {\n            const fromFace = this.getFace(faceDetails.name);\n            // Join the faces...\n            for (const joinData of faceDetails.joins) {\n                fromFace.join(joinData.fromSide, joinData.toSide, this.getFace(joinData.ofFace));\n            }\n            // Join all the tile positions...\n            for (const tilePositionDetails of faceDetails.tilePositions) {\n                const fromTilePosition = this.getFace(faceDetails.name).getTilePosition(tilePositionDetails.position);\n                for (const joinData of tilePositionDetails.joins) {\n                    const toTilePosition = this.getFace(joinData.onFace).getTilePosition(joinData.ofTilePosition);\n                    fromTilePosition.join(joinData.fromSide, joinData.toSide, toTilePosition);\n                }\n            }\n        }\n    }\n\n    integrityCheck(): IntegrityCheckResult {\n        // There must be 4 faces.\n        if (this._faces.size !== Tetrahedron.FACES) {\n            return [false, `Tetrahedron not configured with 4 faces: ${this.toString()}`];\n        }\n        //  Each face must have the same number of tile positions.\n        if (this.tilePositionCount % Tetrahedron.FACES !== 0) {\n            return [false, `Faces have differing Tile Position counts!`];\n        }\n        // The faces must all pass their full integrity checks.\n        for (const face of this._faces.values()) {\n            const faceIntegrity = face.fullIntegrityCheck();\n            if (!faceIntegrity[0]) {\n                return faceIntegrity;\n            }\n        }\n        return [true, \"Passed\"];\n    }\n\n    get tilePositionCount(): number {\n        let tilePositions = 0;\n        this._faces.forEach(face => tilePositions += face.tilePositionCount);\n        return tilePositions;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get tilePositions(): Array<TilePosition> {\n        let tilePositions: Array<TilePosition> = [];\n        this._faces.forEach((face) => tilePositions = tilePositions.concat(face.tilePositions))\n        return tilePositions;\n    }\n\n    get emptyTilePositions(): Array<TilePosition> {\n        let tilePositions: Array<TilePosition> = [];\n        this._faces.forEach((face) => tilePositions = tilePositions.concat(face.emptyTilePositions))\n        return tilePositions;\n    }\n\n    getFace(name: string): Face {\n        if (this._faces.has(name)) {\n            return this._faces.get(name)!;\n        }\n        throw new Error(`Face (${name}) not found on Tetrahedron!`);\n    }\n\n    toString(): string {\n        let tetrahedronString = `Puzzle Type: ${this._name}\\n`;\n        this._faces.forEach(face => tetrahedronString += face.toString());\n        return tetrahedronString;\n    }\n\n}\n","import { TileDefinition } from \"./tile-data-schema\";\nimport { Side } from \"./side\";\n\n\nclass SideSegments {\n\n    constructor(private readonly _sideA: string, private readonly _sideB: string, private readonly _sideC: string) {}\n\n    get A(): string {\n        return this._sideA;\n    }\n\n    get B(): string {\n        return this._sideB;\n    }\n\n    get C(): string {\n        return this._sideC;\n    }\n\n    toString(): string {\n        return this.A + this.B + this.C;\n    }\n\n}\n\nexport class Tile {\n\n    private readonly _id: number;\n    private readonly _sideSegments = new Array<SideSegments>();\n    private _rotations: number = 0;\n\n    validateSegments(segments: string): string {\n        if (segments.length !== 4) {\n            throw new Error(`Segment coding should be four characters, found '${segments}'!`);\n        }\n        if (!segments.match(/^[0|1]+$/)) {\n            throw new Error(`Segment coding can only contain '1' or '0', found '${segments}'!`);\n        }\n        return segments;\n    }\n\n    constructor(tileDetails: TileDefinition) {\n        this._id = tileDetails.tile;\n        const segments = new SideSegments(\n            this.validateSegments(tileDetails.sideA),\n            this.validateSegments(tileDetails.sideB),\n            this.validateSegments(tileDetails.sideC));\n        this._sideSegments.push(segments);\n        this._sideSegments.push(new SideSegments(segments.C, segments.A, segments.B));\n        this._sideSegments.push(new SideSegments(segments.B, segments.C, segments.A));\n    }\n\n    get id(): number {\n        return this._id;\n    }\n\n    get rotations(): number {\n        return this._rotations;\n    }\n\n    get segments(): string {\n        return this._sideSegments[0].toString();\n    }\n\n    placed(): Tile {\n        this._rotations = 0;\n        return this;\n    }\n\n    rotate(): boolean {\n        this._rotations = ++this._rotations % 3;\n        return this._rotations !== 0;\n    }\n\n    getSegmentsForSide(side: Side): string {\n        return this._sideSegments[this._rotations][side];\n    }\n\n    getSegmentsForSideToMatchWith(side: Side): string {\n        const sideSegments = this.getSegmentsForSide(side);\n        return sideSegments[3] + sideSegments[2] + sideSegments[1] + sideSegments[0];\n    }\n\n    hasSideSegments(findSideSegments: string): boolean {\n        for (const segments of this._sideSegments) {\n            if (!!segments.toString().match(findSideSegments)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    toString(): string {\n        return `Id: ${this._id}, Rotation: ${this._rotations}, ` +\n            `Side-A: ${this.getSegmentsForSide(Side.SideA)}, ` +\n            `Side-B: ${this.getSegmentsForSide(Side.SideB)}, ` +\n            `Side-C: ${this.getSegmentsForSide(Side.SideC)}`;\n    }\n\n}\n","// Useful utility functions.\n\n\nfunction getRandomInt(n: number): number {\n    return Math.floor(Math.random() * Math.floor(n));\n}\n\nexport { getRandomInt }\n","import { Tile } from \"./tile\";\nimport { TileDefinition } from \"./tile-data-schema\";\nimport { getRandomInt } from \"./utils\";\n\n\nexport class TilePool {\n\n    // Static tile used to test the tile orientation display.\n    private static readonly DISPLAY_TEST_TILE = new Tile({\n        tile: 0,\n        sideA: \"1000\",\n        sideB: \"0100\",\n        sideC: \"0010\"\n    });\n\n    private readonly _tiles = new Map<number, Tile>();\n\n    constructor(numberOfTiles: number, tileData: TileDefinition[]) {\n        if (numberOfTiles !== tileData.length) {\n            throw new Error(`Number of tiles provided (${tileData.length}) does not match number expected (${numberOfTiles})!`);\n        }\n        for (const tileDetails of tileData) {\n            if (!this.addTile(tileDetails)) {\n                throw new Error(`Duplicate Tile found in pool for (${tileDetails.tile})!`);\n            }\n        }\n    }\n\n    addTile(tileDetails: TileDefinition): boolean {\n        if (this._tiles.has(tileDetails.tile)) {\n            return false;\n        }\n        const newTile = new Tile(tileDetails);\n        this._tiles.set(newTile.id, newTile);\n        return true;\n    }\n\n    get tileCount(): number {\n        return this._tiles.size;\n    }\n\n    get isEmpty(): boolean {\n        return this.tileCount === 0;\n    }\n\n    get tiles(): Array<Tile> {\n        return Array.from(this._tiles.values());\n    }\n\n    getTile(id: number): Tile {\n        if (this._tiles.has(id)) {\n            const tile = this._tiles.get(id)!;\n            this._tiles.delete(id);\n            return tile;\n        }\n        throw new Error(`Tile (${id}) not found in the tile pool!`);\n    }\n\n    get nextTile(): Tile {\n        if (this.isEmpty) {\n            throw new Error(\"No more Tiles in the pool!\");\n        }\n        // Sort keys in ascending numerical order.\n        const keys = Array.from(this._tiles.keys()).sort((a: number, b: number) => a - b);\n        return this.getTile(keys[0]);\n    }\n\n    get randomTile(): Tile {\n        if (this.isEmpty) {\n            throw new Error(\"No more Tiles in the pool!\");\n        }\n        const keys = Array.from(this._tiles.keys());\n        const id = keys[getRandomInt(keys.length)];\n        return this.getTile(id);\n    }\n\n    get displayTestTile(): Tile {\n        if (this.isEmpty) {\n            throw new Error(\"No more Tiles in the pool!\");\n        }\n        // Discard a random tile.\n        this.randomTile;\n        // Always return the same test tile.\n        return TilePool.DISPLAY_TEST_TILE;\n    }\n\n    returnTile(tile: Tile): void {\n        if (this._tiles.has(tile.id)) {\n            throw new Error(\"Returned Tile already in the pool!\");\n        }\n        this._tiles.set(tile.id, tile);\n    }\n\n    toString(): string {\n        let tilesString = \"TilePool:\\n\";\n        this._tiles.forEach((tile) => tilesString += tile.toString() + '\\n');\n        return tilesString;\n    }\n\n}\n","import { simplePuzzle } from \"./simple-puzzle\";\nimport { pocketPuzzle } from \"./pocket-puzzle\";\nimport { greatPuzzle } from \"./great-puzzle\";\nimport { LayoutData } from \"./layout-data-schema\";\nimport { TileData } from \"./tile-data-schema\";\nimport { Tetrahedron } from \"./tetrahedron\";\nimport { TilePool } from \"./tile-pool\";\nimport { PuzzleDataElements, PuzzleComponents } from \"./common-data-schema\";\n\n\nfunction getTilePool(tileData: TileData): TilePool {\n    return new TilePool(tileData.totalNumberOfTiles, tileData.tiles);\n}\n\nfunction getTetrahedron(layoutData: LayoutData): Tetrahedron {\n    const tetrahedron = new Tetrahedron(layoutData.puzzle, layoutData.numberOfTilesPerFace, layoutData.faces);\n    const integrityCheck = tetrahedron.integrityCheck();\n    if (!integrityCheck[0]) {\n        throw new Error(integrityCheck[1]);\n    }\n    return tetrahedron;\n}\n\nfunction getPuzzleTypeData(puzzleType: string): PuzzleDataElements {\n    switch (puzzleType) {\n        case \"Simple\":\n            return simplePuzzle;\n        case \"Pocket\":\n            return pocketPuzzle;\n        case \"Great\":\n            return greatPuzzle;\n        default:\n            throw new Error(\"Invalid puzzle type option!\");\n    }\n}\n\nfunction getPuzzleComponents(puzzleType: string | PuzzleDataElements): PuzzleComponents {\n    let puzzleTypeData;\n    if (typeof(puzzleType) === \"string\") {\n        puzzleTypeData = getPuzzleTypeData(puzzleType);\n    } else {\n        puzzleTypeData = puzzleType;\n    }\n    const tilePool = getTilePool(puzzleTypeData.tileData);\n    const tetrahedron = getTetrahedron(puzzleTypeData.layoutData);\n    if (tilePool.tileCount !== tetrahedron.tilePositionCount) {\n        throw new Error(\"There must be enough Tiles to cover the Tetrahedron!\");\n    }\n    return {\n        tilePool: tilePool,\n        tetrahedron: tetrahedron\n    }\n}\n\nexport { getPuzzleComponents }\n","// These change value objects allow us to keep the solving and display code separate.\n//\n// Initial - Draw an empty puzzle\n// Empty - Draw an empty tile position\n// Final - Draw a tile at it's final tile position (no animation)\n// Place - Animate placing a tile at a tile position\n// Rotate - Animate rotating a tile at a tile position\n// Remove - Animate removing the tile at a tile position\n// Solved - A solution to the current puzzle\n// Completed - No more solutions to the current puzzle\n\n\nenum PuzzleChangeType {\n    Initial = \"Initial\",\n    Empty = \"Empty\",\n    Final = \"Final\",\n    Place = \"Place\",\n    Rotate = \"Rotate\",\n    Remove = \"Remove\",\n    Solved = \"Solved\",\n    Completed = \"Completed\"\n}\n\n\nclass PuzzleChange {\n\n    static readonly INITIAL = new PuzzleChange(PuzzleChangeType.Initial);\n    static readonly SOLVED = new PuzzleChange(PuzzleChangeType.Solved);\n    static readonly COMPLETED = new PuzzleChange(PuzzleChangeType.Completed);\n\n    constructor(readonly type: PuzzleChangeType) {}\n\n    isSolved(): boolean {\n        return this === PuzzleChange.SOLVED;\n    }\n\n    isComplete(): boolean {\n        return this === PuzzleChange.COMPLETED;\n    }\n\n}\n\nclass TilePositionChange extends PuzzleChange {\n\n    static empty(tilePositionId: string): PuzzleChange {\n        return new TilePositionChange(PuzzleChangeType.Empty, tilePositionId);\n    }\n\n    static rotate(tilePositionId: string): PuzzleChange {\n        return new TilePositionChange(PuzzleChangeType.Rotate, tilePositionId);\n    }\n\n    constructor(type: PuzzleChangeType, readonly tilePositionId: string) {\n        super(type);\n    }\n\n}\n\nclass TileChange extends TilePositionChange {\n\n    static final(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.Final, tilePositionId, tileId, rotations, segments);\n    }\n\n    static place(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.Place, tilePositionId, tileId, rotations, segments);\n    }\n\n    static remove(tilePositionId: string, tileId: number, rotations: number, segments: string): PuzzleChange {\n        return new TileChange(PuzzleChangeType.Remove, tilePositionId, tileId, rotations, segments);\n    }\n\n    constructor(type: PuzzleChangeType, tilePositionId: string, readonly tileId: number, readonly rotations: number, readonly segments: string) {\n        super(type, tilePositionId);\n    }\n\n}\n\nexport { PuzzleChange, PuzzleChangeType, TilePositionChange, TileChange }\n","import { Tetrahedron } from \"./tetrahedron\";\nimport { TilePool } from \"./tile-pool\";\nimport { PuzzleChange, TileChange } from \"./puzzle-changes\";\n\n\ninterface Solver {\n    nextState: () => PuzzleChange;\n    finalState: () => Array<PuzzleChange>;\n}\n\n\nabstract class SolverBase implements Solver {\n\n    constructor(protected _tetrahedron: Tetrahedron, protected _tilePool: TilePool) {\n        if (this._tilePool.tileCount !== this._tetrahedron.tilePositionCount) {\n            throw new Error(\"There must be enough Tiles to cover the Tetrahedron!\");\n        }\n    }\n\n    abstract nextState(): PuzzleChange;\n\n    finalState(): Array<PuzzleChange> {\n        return this._tetrahedron.tilePositions\n            .map((tilePosition) =>\n                TileChange.final(tilePosition.id, tilePosition.tile.id, tilePosition.tile.rotations, tilePosition.tile.segments));\n    }\n\n}\n\n\nexport { Solver, SolverBase }\n","import { SolverBase } from \"./solver-base\";\nimport { Tetrahedron } from \"./tetrahedron\";\nimport { TilePool } from \"./tile-pool\";\nimport { Tile } from \"./tile\";\nimport { TilePosition } from \"./tile-position\";\nimport { PuzzleChange, TileChange, TilePositionChange } from \"./puzzle-changes\";\nimport { getRandomInt } from \"./utils\";\n\n\nexport class NoMatchingSolver extends SolverBase {\n\n    private _emptyTilePositions: Array<TilePosition>;\n    private _tilePosition: TilePosition;\n    private _rotating: number = 0;\n\n    constructor(tetrahedron: Tetrahedron, tilePool: TilePool,\n                private _tileSelection: string, private _tilePlacement: string, private _tileRotation: string) {\n        super(tetrahedron, tilePool);\n        this._emptyTilePositions = this._tetrahedron.emptyTilePositions;\n        this._tilePosition = this.getNextTilePosition();\n    }\n\n    private getNextTilePosition(): TilePosition {\n        switch (this._tilePlacement) {\n            case \"Random\":\n                const position = getRandomInt(this._emptyTilePositions.length);\n                const tilePosition = this._emptyTilePositions.splice(position, 1);\n                return tilePosition[0];\n            case \"Sequential\":\n                return this._emptyTilePositions.shift()!;\n            default:\n                throw new Error(\"Invalid tile placement option!\");\n        }\n    }\n\n    private getTileSelection(): Tile {\n        switch (this._tileSelection) {\n            case \"Random\":\n                return this._tilePool.randomTile;\n            case \"Sequential\":\n                return this._tilePool.nextTile;\n            case \"DisplayTest\":\n                return this._tilePool.displayTestTile;\n            default:\n                throw new Error(\"Invalid tile selection option!\");\n        }\n    }\n\n    private tileRotations(): number {\n        switch (this._tileRotation) {\n            case \"None\":\n                return 0;\n            case \"Random\":\n                return getRandomInt(3);\n            default:\n                throw new Error(\"Invalid tile rotation option!\");\n        }\n    }\n\n    private placeTile(): PuzzleChange {\n        this._tilePosition.tile = this.getTileSelection();\n        this._rotating = this.tileRotations();\n        return TileChange.place(this._tilePosition.id, this._tilePosition.tile.id, this._tilePosition.tile.rotations, this._tilePosition.tile.segments);\n    }\n\n    private rotateOrNext(): PuzzleChange {\n        if (this._rotating > 0) {\n            this._rotating--;\n            this._tilePosition.tile.rotate();\n            return TilePositionChange.rotate(this._tilePosition.id);\n        } else {\n            if (this._emptyTilePositions.length === 0) {\n                return PuzzleChange.SOLVED;\n            } else {\n                this._tilePosition = this.getNextTilePosition();\n                return this.placeTile()\n            }\n        }\n    }\n\n    nextState(): PuzzleChange {\n        if (this._tilePosition.isEmpty()) {\n            return this.placeTile();\n        }\n        return this.rotateOrNext();\n    }\n\n}\n","import { SolverBase } from \"./solver-base\";\nimport { Tetrahedron } from \"./tetrahedron\";\nimport { TilePool } from \"./tile-pool\";\nimport { Tile } from \"./tile\";\nimport { TilePosition } from \"./tile-position\";\nimport { PuzzleChange, TileChange, TilePositionChange } from \"./puzzle-changes\";\n\n\ntype SolverState = {\n    tilePosition: TilePosition,\n    untriedTiles: Array<Tile>,\n    rejectedTiles: Array<Tile>\n}\n\n\nabstract class IterativeSolverBase extends SolverBase {\n\n    private readonly _emptyTilePositions: Array<TilePosition>;\n    private readonly _solverStack: Array<SolverState> = [];\n    private _currentState: SolverState;\n\n    protected constructor(tetrahedron: Tetrahedron, tilePool: TilePool) {\n        super(tetrahedron, tilePool);\n        this._emptyTilePositions = this._tetrahedron.emptyTilePositions;\n        this._currentState = {\n            tilePosition: this._emptyTilePositions.shift()!,\n            untriedTiles: tilePool.tiles,\n            rejectedTiles: new Array<Tile>()\n        }\n    }\n\n    private static rotateOrRemove(state: SolverState): PuzzleChange {\n        let displayChange;\n        // Try rotating the current tile.\n        const tilePosition = state.tilePosition;\n        if (tilePosition.tile.rotate()) {\n            displayChange = TilePositionChange.rotate(tilePosition.id);\n        } else {\n            // If we've tried all the rotations and none match then reject this tile.\n            displayChange = TileChange.remove(tilePosition.id, tilePosition.tile.id, tilePosition.tile.rotations, tilePosition.tile.segments);\n            const tile = tilePosition.removeTile();\n            state.rejectedTiles.push(tile);\n        }\n        return displayChange;\n    }\n\n    protected abstract createNewState(state: SolverState, tilePosition: TilePosition): SolverState;\n\n    private tryNextTilePosition(state: SolverState): PuzzleChange {\n        let displayChange;\n        // If there aren't any more tile positions a solution has been reached!\n        if (this._emptyTilePositions.length === 0) {\n            displayChange = PuzzleChange.SOLVED;\n        } else {\n            // Save the current state, initialise a new state and move on.\n            this._solverStack.push(state);\n            this._currentState = this.createNewState(state, this._emptyTilePositions.shift()!);\n            displayChange = this.nextState();\n        }\n        return displayChange;\n    }\n\n    private tryNextTile(state: SolverState): PuzzleChange {\n        let displayChange;\n        // If we have any untried tiles then try the next one.\n        const tilePosition = state.tilePosition;\n        if (state.untriedTiles.length > 0) {\n            tilePosition.tile = state.untriedTiles.shift()!;\n            displayChange = TileChange.place(tilePosition.id, tilePosition.tile.id, tilePosition.tile.rotations, tilePosition.tile.segments);\n        } else {\n            // Otherwise if we've tried all the tiles and nothing matches we need to move back a tile position.\n            this._emptyTilePositions.unshift(tilePosition);\n            // If we can't move back then we've tried every combination!\n            if (this._solverStack.length === 0) {\n                displayChange = PuzzleChange.COMPLETED;\n            } else {\n                this._currentState = this._solverStack.pop()!;\n                // Cycle through the rotations or remove the tile if nothing matches.\n                displayChange = IterativeSolverBase.rotateOrRemove(this._currentState);\n            }\n        }\n        return displayChange;\n    }\n\n    nextState(): PuzzleChange {\n        let displayChange;\n        // If we don't have a tile at the current tile position.\n        const tilePosition = this._currentState.tilePosition;\n        if (tilePosition.isEmpty()) {\n            // Try the next tile.\n            displayChange = this.tryNextTile(this._currentState);\n        } else {\n            // If everything matches then move on to the next tile position.\n            if (tilePosition.tilesMatch()) {\n                displayChange = this.tryNextTilePosition(this._currentState);\n            } else {\n                // Cycle through the rotations or remove the tile if nothing matches.\n                displayChange = IterativeSolverBase.rotateOrRemove(this._currentState);\n            }\n        }\n        return displayChange;\n    }\n\n}\n\nexport { SolverState, IterativeSolverBase }\n","import { Tetrahedron } from \"./tetrahedron\";\nimport { TilePool } from \"./tile-pool\";\nimport { Tile } from \"./tile\";\nimport { TilePosition } from \"./tile-position\";\nimport { SolverState, IterativeSolverBase } from \"./solver-iterative-base\";\n\n\nexport class BruteForceSolver extends IterativeSolverBase {\n\n    constructor(tetrahedron: Tetrahedron, tilePool: TilePool) {\n        super(tetrahedron, tilePool);\n    }\n\n    protected createNewState(state: SolverState, newTilePosition: TilePosition): SolverState {\n        return {\n            tilePosition: newTilePosition,\n            untriedTiles: state.untriedTiles.concat(state.rejectedTiles),\n            rejectedTiles: new Array<Tile>()\n        }\n    }\n\n}\n","import { Tetrahedron } from \"./tetrahedron\";\nimport { TilePool } from \"./tile-pool\";\nimport { Tile } from \"./tile\";\nimport { TilePosition } from \"./tile-position\";\nimport { SolverState, IterativeSolverBase } from \"./solver-iterative-base\";\n\n\nexport class OnlyValidSolver extends IterativeSolverBase {\n\n    constructor(tetrahedron: Tetrahedron, tilePool: TilePool) {\n        super(tetrahedron, tilePool);\n    }\n\n    protected createNewState(state: SolverState, newTilePosition: TilePosition): SolverState {\n        // Find existing sides to match.\n        const segmentsToFind = newTilePosition.segmentsToFind();\n        // Filter the unused tiles so we only try those that are relevant.\n        const newUntriedTiles = new Array<Tile>();\n        const newRejectedTiles = new Array<Tile>();\n        const untriedTiles = state.untriedTiles.concat(state.rejectedTiles);\n        for (const untriedTile of untriedTiles) {\n            if (untriedTile.hasSideSegments(segmentsToFind)) {\n                newUntriedTiles.push(untriedTile);\n            } else {\n                newRejectedTiles.push(untriedTile);\n            }\n        }\n        return {\n            tilePosition: newTilePosition,\n            untriedTiles: newUntriedTiles,\n            rejectedTiles: newRejectedTiles\n        }\n    }\n\n}\n","import { getPuzzleComponents } from \"./puzzle-loader\";\nimport { Solver } from \"./solver-base\";\nimport { NoMatchingSolver } from \"./solver-no-matching\";\nimport { BruteForceSolver } from \"./solver-brute-force\";\nimport { OnlyValidSolver } from \"./solver-only-valid\";\n\n\ninterface SolverOptions {\n    puzzleType: string,\n    solveAlgorithm: string,\n    tileSelection: string,\n    tilePlacement: string,\n    tileRotation: string\n}\n\nfunction buildSolver(options: SolverOptions): Solver {\n    // Determine the data required for the puzzle and build the internal puzzle\n    // representation with the pool of tiles waiting to be placed on it.\n    const puzzle = getPuzzleComponents(options.puzzleType);\n    // Use the options from the UI to build a solver with the puzzle data.\n    switch (options.solveAlgorithm) {\n        case \"NoMatching\":\n            return new NoMatchingSolver(puzzle.tetrahedron, puzzle.tilePool,\n                options.tileSelection, options.tilePlacement, options.tileRotation);\n        case \"Brute\":\n            return new BruteForceSolver(puzzle.tetrahedron, puzzle.tilePool);\n        case \"OnlyValid\":\n            return new OnlyValidSolver(puzzle.tetrahedron, puzzle.tilePool);\n        default:\n            throw new Error(\"Invalid solve algorithm option!\");\n    }\n}\n\nexport { SolverOptions, buildSolver }\n","import { buildSolver, SolverOptions } from \"./solver-factory\";\n\n\nonmessage = function (e) {\n    // Extract the options form the message.\n    const solverOptions = <SolverOptions> e.data;\n    // Build the solver to use.\n    const solver = buildSolver(solverOptions);\n    // Run the solver until a solution is found.\n    let puzzleChange = solver.nextState();\n    while (!puzzleChange.isSolved()) {\n        puzzleChange = solver.nextState();\n    }\n    // Return the result for display.\n    // @ts-ignore\n    postMessage(solver.finalState());\n}\n"]}